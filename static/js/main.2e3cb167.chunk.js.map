{"version":3,"sources":["serviceWorker.js","config.tsx","actions/notify.tsx","components/Blog/add/Add.tsx","shared/services/HttpService.tsx","../../src/input/input.tsx","../../src/HttpService.tsx","../../src/select/select.tsx","../../src/error/error.tsx","../../src/button/button.tsx","components/Blog/common/SelectCardList.tsx","components/Blog/cards/Sites.tsx","components/Blog/detail/Entry.tsx","components/Blog/cards/Authors.tsx","components/Blog/Dashboard.tsx","actions/login-dialog.tsx","actions/token.tsx","actions/user.tsx","components/Blog/Sidebar.tsx","shared/interfaces/user.tsx","shared/guards/AuthGuard.tsx","components/Blog/Blog.tsx","components/Forum/Forum.tsx","components/Dashboard/Dashboard.tsx","components/Photos/Photos.tsx","components/Movies/Movies.tsx","shared/components/NotFound.tsx","components/Login/Facebook.tsx","components/Login/LoginForm.tsx","components/Login/RegisterForm.tsx","shared/components/Dialog.tsx","components/Login/LoginDialog.tsx","shared/interceptors/response_error.interceptor.tsx","shared/interceptors/token.interceptor.tsx","shared/interceptors/interceptor.tsx","components/App.tsx","reducers/notify.tsx","reducers/token.tsx","reducers/user.tsx","reducers/login-dialog.tsx","store.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","routeName","a","process","config","endpoints","auth","login","me","exists_fb","register","blog","authors","countries","base","routes","root","dashboard","sites","addNew","detail","id","notifySuccess","msg","type","notifyError","AddForm","props","state","elements","value","e","this","addElement","array","splice","setState","v","className","key","toString","name","placeholder","rows","onChange","onValueChange","i","target","accept","onFileChange","elem","getParagraph","getImage","toolAction","removeButton","length","onClick","removeElement","addNewParagrapgh","addNewImage","event","preventDefault","onSubmit","setSettings","map","getPartForm","React","Component","connect","dispatch","HttpService","url","params","axios","get","then","response","data","post","delete","put","InlineStyles","input","width","fontSize","InputWidget","render","style","ref","refe","filters","select","border","borderBottom","backgroundColor","borderRadiusTop","outline","fontFamily","paddingLeft","SelectWidget","_httpService","selected","getDerivedStateFromProps","componentDidMount","getData","handleSelectChange","Number","changeValue","disabled","entity","color","font_weight","ErrorWidget","button","SelectCardList","subjects","selectedEntity","loading","initData","mapSubjects","selector","forEach","subject","getBlogs","getSubjects","endpoint","catch","error","index","includes","blogs","console","log","find","keyId","Card","CardContent","to","title","CardActions","Button","size","handleRemoveSubjectBlogs","LinearProgress","handleSubjectSelectChange","renderMainCard","renderBlogsCard","Sites","country","Entry","content","user_id","cooperators","photo_names","views","getBlog","Authors","Dashboard","latestBlogs","mostSeenBlogs","topSeenAuthors","mostSeenCountries","getMostSeenBlogs","getLatestBlogs","getTopSeenAuthors","getMostSeenCountries","limit","ordering","err","pathname","user","username","setOpenLoginDialog","open","setToken","setUserData","RegisterFormType","BlogSidebar","token","resetToken","children","AuthGuard","component","app","rest","Blog","path","exact","Forum","autoPlay","muted","loop","src","Photos","Movies","NotFound","Facebook","facebookData","cssClass","fbCssClass","appId","autoLoad","fields","callback","responseFb","userID","exists","accessToken","handleClose","setRegistration","FRAGMENTARY","LoginForm","useState","password","credentials","setCredentials","valid","validationError","setValidationError","setNonValid","setTimeout","handleSubmit","onUsernameChange","onPasswordChange","text","FULL","RegisterForm","useForm","setValue","errors","passwordConfirmation","profile","facebook_id","reponse","NONE","required","registerType","email","Dialog","currentTarget","onClose","CloseOutlined","LoginDialog","isOpenLoginDialog","isRegistration","getUserData","logged","ErrorResponseInterceptor","staticMessages","504","0","interceptors","use","status","message","non_field_errors","Error","TokenInterceptor","request","localStorage","getItem","headers","Interceptor","_errInterceptor","_tokenInterceptor","initInterceptor","App","_interceptor","_notificationSystem","createRef","_notificationStyle","NotificationItem","DefaultStyle","addNotification","level","current","initInterceptors","prevProps","prevState","snapshot","notification","notify","basename","renderRouter","initialState","action","setItem","facebook_name","createStore","combineReducers","applyMiddleware","createLogger","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e3cb167.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const detailRoute = (routeName: string) => (id: number | null = null) => (id ? `${routeName}${id}` : `${routeName}:id`)\n\n// let a = {\n//     account: 'http://127.0.0.1:8000',\n//     blog: 'http://127.0.0.1:5000',\n// }\n\n// if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {\n//     ;\n// } else {\n//     a = {\n//         account: 'http://172.105.93.9',\n//         blog: 'http://172.105.93.9',\n//     }\n// }\n\nconst a = process.env.PUBLIC_URL;\n\nexport const config = {\n    endpoints: {\n        auth: {\n            login: `${a}/account/api_token_auth/`,\n            me: `${a}/account/users/me/`,\n            exists_fb: `${a}/account/users/exist_fb_account/`,\n            register: `${a}/account/users/`\n        },\n        blog: {\n            authors: `${a}/blogs/authors/`,\n            countries: `${a}/blogs/countries/`,\n            base: `${a}/blogs/`,\n        }\n    },\n    routes: {\n        root: '/',\n        blog: {\n            dashboard: '/blog',\n            authors: '/blog/authors',\n            sites: '/blog/sites',\n            addNew: '/blog/add',\n            detail: detailRoute('/blog/'),\n        }\n    }\n}","export const notifyInfo = (msg: string) => {\n  return {\n      type: 'info',\n      msg: msg\n  };\n}\n\nexport const notifySuccess = (msg: string) =>  {\n  return {\n      type: 'success',\n      msg: msg\n  };\n}\n\nexport const notifyWarning = (msg: string) => {\n  return {\n      type: 'warning',\n      msg: msg\n  };\n}\n\nexport const notifyError = (msg: string) => {\n  return {\n      type: 'error',\n      msg: msg\n  };\n}","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport './Add.scss';\n\nimport { notifySuccess } from '../../../actions/notify';\n\n\ninterface Element {\n  value: string,\n  type: 'paragraph' | 'image'\n}\n\ninterface State {\n  elements: Element[];\n}\n\ninterface Props {\n  notifySuccess: any;\n}\n\nclass AddForm extends React.Component <Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      elements: [{value: '', type: 'paragraph'}]\n    }\n  }\n\n  addNewParagrapgh(e: any, id: number) {\n    this.addElement('paragraph', id);\n  }\n\n  addNewImage(e: any, id: number) {\n    this.addElement('image', id);\n  }\n\n  addElement(type: 'paragraph' | 'image', id: number) {\n    const array: Element[] = [...this.state.elements];\n    array.splice(id+1, 0, {value: '', type: type});\n    this.setState({\n      elements: [...array]\n    });\n  }\n\n  removeElement(e: any, id: number) {\n    const array: Element[] = [...this.state.elements];\n    array.splice(id, 1);\n    this.setState({\n      elements: [...array]\n    });\n  }\n\n  getParagraph(v: string, id: number) {\n    return (\n      <div className=\"form__paragraph\" key={id}>\n        <textarea\n          key={id}\n          id={id.toString()}\n          className=\"form__control form__textarea\"\n          name={'text-' + id.toString()}\n          placeholder=\"\"\n          rows={5}\n          value={v}\n          onChange={(e) => this.onValueChange(e, id)}\n        />\n      </div>\n    )\n  }\n\n  onValueChange(e: any, i: number) {\n    const array: Element[] = [...this.state.elements];\n    array[i].value = e.target.value;\n    this.setState({\n      elements: array\n    })\n  }\n\n  getImage() {\n    return (\n      <input type=\"file\" name=\"pic\" accept=\"image/*\" onChange={(e) => this.onFileChange(e)}/>\n    )\n  }\n\n  onFileChange(e: any) {\n    // console.log(e.target.value)\n  }\n\n  getPartForm(elem: Element, id: number) {\n    return (\n      <div className=\"form__part-form\" key={id}>\n        {elem.type === 'paragraph' ? this.getParagraph(elem.value, id) : this.getImage()}\n        {this.toolAction(id)}\n      </div>\n    )\n  }\n\n  toolAction(id: number) {\n    let removeButton = <div></ div>;\n    const isDeletable = id === 0 && this.state.elements.length > 0;\n    if (!isDeletable) {\n      removeButton = <button type=\"button\" className=\"form__remove-p\" onClick={(e) => this.removeElement(e, id)}>Remove</button>\n    }\n\n    return (\n      <div className=\"form__tool-action\">\n        <button type=\"button\" className=\"form__add-p\" onClick={(e) => this.addNewParagrapgh(e, id)}>Add here p</button>\n        <button type=\"button\" className=\"form__add-p\" onClick={(e) => this.addNewImage(e, id)}>Add here img</button>\n        {removeButton}\n      </div>\n    )\n  }\n\n  setSettings() {\n    return (\n      <div className=\"form__settings\">\n        <input placeholder=\"Title\" />\n        <input placeholder=\"Region\" />\n      </div>\n    )\n  }\n\n  onSubmit(event: any) {\n    event.preventDefault();\n    this.props.notifySuccess('asd');\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"form\" onSubmit={(e) => this.onSubmit(e)}>\n          { this.setSettings() }\n          { this.state.elements.map((elem, id) => this.getPartForm(elem, id)) }\n          <button type=\"submit\" className=\"form__submit\">Submit</button>\n        </form>\n      </div>\n    );\n  }\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(AddForm);\n","import axios from 'axios';\n\n\n// const axiosInstance = axios.create({\n//   // baseURL: process.env.PUBLIC_URL,\n// });\n\n\ninterface Params {\n  [name: string]: string | number;\n}\n\n\nclass HttpService {\n  get(url: string, params: Params = {}): Promise<any> {\n    return axios.get(url, {params: params}).then(response => response.data);\n  }\n\n  post(url: string, data: {}): Promise<any> {\n    return axios.post(url, data).then(response => response.data);\n  }\n\n  delete(url: string, id: number): Promise<any> {\n    return axios.delete(url).then(response => response.data);\n  }\n\n  put(url: string, data: {}): Promise<any> {\n    return axios.put(url).then(response => response.data);\n  }\n}\n\nexport default HttpService;","import React from 'react';\n\n\nconst InlineStyles = {\n  input: {\n    width: '100%',\n    fontSize: '2.5rem',\n  }\n}\n\ninterface State {\n\n}\n\ninterface Props {\n  onChange?: (val: string) => void;\n  refe?: any;\n  name?: string;\n  placeholder?: string;\n  type?: string;\n}\n\nclass InputWidget extends React.Component<Props, State> {\n  onChange(event: any) {\n    if (this.props.onChange) this.props.onChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <input\n        className=\"widget-input\"\n        style={InlineStyles.input}\n        type={this.props.type}\n        placeholder={this.props.placeholder}\n        name={this.props.name}\n        ref={this.props.refe}\n        onChange={e => this.onChange(e)}\n      />\n    )\n  }\n}\n\nexport default InputWidget;","import axios from 'axios';\n\n\ninterface Filters {\n  [name: string]: string | number;\n}\n\n\nclass HttpService {\n  get(url: string, filters: Filters = {}): Promise<any> {\n    return axios.get(url, {params: filters}).then(response => response.data);\n  }\n}\n\nexport default HttpService;","import React from 'react';\n\nimport HttpService from '../HttpService';\n\n\nconst InlineStyles = {\n  select: {\n    width: '100%',\n    fontSize: '2rem',\n    border: '0',\n    borderBottom: '1px black solid',\n    backgroundColor: 'transparent',\n    borderRadiusTop: '5px',\n    outline: 'none',\n    fontFamily: 'serif',\n    paddingLeft: '3px',\n    '&:hover': {\n      backgroundColor: 'black',\n    }\n  }\n};\n\ninterface State {\n  selected: number;\n  data: Entity[];\n}\n\ninterface Entity {\n  id: number;\n  name: string;\n}\n\ninterface Props {\n  onChange?: (id: number) => void;\n  data?: Entity[];\n  endpoint?: string;\n  placeholder?: string;\n  changeValue?: boolean;\n}\n\nclass SelectWidget extends React.Component<Props, State> {\n  private _httpService: HttpService = new HttpService();\n  state = {\n    selected: -1,\n    data: [],\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (props.data !== state.data && !props.endpoint) {\n      return {\n        data: props.data,\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    const url = this.props.endpoint;\n    if (url) this.getData(url);\n  }\n\n\n  getData(url: string | null) {\n    if (url) {\n      this._httpService.get(url).then(response => {\n        this.setState({\n          data: response || [],\n        })\n      });\n    }\n  }\n\n  handleSelectChange(event: any) {\n    const id: number = Number(event.target.value);\n    if (this.props.onChange) this.props.onChange(id);\n    this.setState({\n      selected: id,\n    });\n  }\n\n  render() {\n    return (\n      <select\n        className=\"widget-select\"\n        style={InlineStyles.select}\n        value={this.props.changeValue ? this.state.selected : -1}\n        onChange={(e) => this.handleSelectChange(e)}\n      >\n        <option value={-1} disabled>{this.props.placeholder || \"Pick\"}</option>\n        {this.state.data.map((entity: Entity) => <option key={entity.id} value={entity.id}>{entity.name}</option>)}\n      </select>\n    )\n  }\n}\n\nexport default SelectWidget;","import React from 'react';\n\n\nconst InlineStyles = {\n  error: {\n    color: 'red',\n    font_weight: 'bold' as string,\n    fontSize: '1.5rem',\n  }\n};\n\ninterface Props {\n  customStyle?: {};\n  text: string;\n}\n\nconst ErrorWidget = (props: Props) => {\n  return (\n      <div\n        className=\"widget-error\"\n        style={{...InlineStyles.error, ...props.customStyle}}\n      >\n        {props.text}\n      </div>\n  )\n}\n\nexport default ErrorWidget;","import React from 'react';\n\n\nconst InlineStyles = {\n  button: {\n    fontSize: '2rem',\n    // border: '0',\n    // borderBottom: '1px black solid',\n    backgroundColor: 'transparent',\n    borderRadiusTop: '5px',\n    // outline: 'none',\n    // fontFamily: 'serif',\n    // paddingLeft: '3px',\n  }\n};\n\ninterface State {\n\n}\n\ninterface Props {\n  text?: string;\n  type?: \"button\" | \"submit\" | \"reset\";\n  onClick?: (event: any) => void;\n}\n\nclass ButtonWidget extends React.Component<Props, State> {\n  render() {\n    return (\n      <button\n        style={InlineStyles.button}\n        type={this.props.type}\n        onClick={this.props.onClick}\n      >{this.props.text}</button>\n    )\n  }\n}\n\nexport default ButtonWidget;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './SelectCardList.scss';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ViewHeadlineIcon from '@material-ui/icons/ViewHeadline';\n\nimport { config  } from '../../../config';\nimport HttpService from '../../../shared/services/HttpService'\nimport { Blog } from '../../../shared/interfaces/blog';\nimport { SelectWidget } from 'widgets';\n\n\ninterface Props {\n    endpoint: string;\n    filters: {[filterName: string]: string | null};\n    selector?: string;\n    initData?: any[];\n};\n\ninterface Subject {\n    id: number;\n    name?: string;\n}\n\ninterface Entity {\n  subject: any;\n  blogs: Blog[];\n}\n\ninterface State {\n  loading: boolean;\n  subjects: any[];\n  selectedEntity: Entity[];\n}\n\n\nclass SelectCardList extends React.Component<Props, State> {\n  private _httpService: HttpService = new HttpService();\n  state = {\n    subjects: [],\n    selectedEntity: [],\n    loading: false,\n  };\n\n  componentDidMount() {\n    this.setState({\n      loading: true,\n    });\n    const initData = this.props.initData;\n    if (initData) {\n      const subjects: Subject[] = this.mapSubjects(initData, this.props.selector)\n      subjects.forEach((subject: Subject) => this.getBlogs(subject));\n    }\n    this.getSubjects()\n  }\n\n  getSubjects() {\n    const url = this.props.endpoint;\n    const selector = this.props.selector;\n    this._httpService.get(url).then(response => {\n      const subjects: Subject[] = this.mapSubjects(response, selector)\n      this.setState({\n        subjects: subjects,\n        loading: false,\n      });\n    }).catch(error => {\n    })\n  }\n\n  mapSubjects(subjects: any, selector: string | undefined) {\n    return subjects.map(\n      (subject: Subject | string, index: number) => ({id: (subject as Subject).id || index, name: selector ? subject[selector] : subject})\n    );\n  }\n\n  getBlogs(subject: Subject) {\n    const subjectBlogsExists = this.state.selectedEntity.map((entity: Entity) => entity.subject.id).includes(subject.id);\n    if (!subjectBlogsExists) {\n      const url = config.endpoints.blog.base;\n      const filters = {};\n      for (const key in this.props.filters) {\n        filters[key] = this.props.filters[key] === 'id' ? subject.id : subject.name;\n      }\n      this._httpService.get(url, filters).then((response: Blog[]) => {\n        const entity: Entity = {subject, blogs: response};\n        const selectedEntity: Entity[] = [...this.state.selectedEntity, entity];\n        this.setState({\n          selectedEntity,\n        });\n        console.log(this.state)\n      }).catch(error => {\n      })\n    }\n    this.setState({\n      loading: false,\n    });\n  }\n\n  handleSubjectSelectChange(id: number) {\n    this.setState({\n      loading: true,\n    });\n    const subject: Subject = this.state.subjects.find((subject: Subject) => id === subject.id) || {id};\n    this.getBlogs(subject);\n  }\n\n  handleRemoveSubjectBlogs(index: number) {\n    const selectedEntity: Entity[] = [...this.state.selectedEntity];\n    selectedEntity.splice(index, 1);\n    this.setState({\n      selectedEntity,\n    });\n  }\n\n  renderBlogsCard(keyId: number, subject: Subject, blogs: Blog[]) {\n    return (\n      <Card className=\"blog-cards__card\" key={keyId}>\n        <CardContent>\n          <header className=\"blog-cards__blogs-header\">{subject.name || subject.id}</header>\n          {blogs.map(blog => {\n            return (\n              <Link to={config.routes.blog.detail(blog.id)} className=\"blog-cards__blogs-list-element\" key={blog.id}>\n                <ViewHeadlineIcon fontSize=\"inherit\" />\n                <div className=\"blog-cards__blogs-list-element-text\">{blog.title}</div>\n              </Link>\n            )\n          })}\n        </CardContent>\n        <CardActions>\n          <Button size=\"large\" onClick={() => this.handleRemoveSubjectBlogs(keyId)}>Unpin</Button>\n        </CardActions>\n      </Card>\n    )\n  }\n\n  renderMainCard() {\n    return (\n      <Card className=\"blog-cards__card--header\">\n        <CardContent>\n          {this.state.loading && <LinearProgress />}\n          <SelectWidget data={this.state.subjects} onChange={(id: number) => this.handleSubjectSelectChange(id)}/>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"blog-cards\">\n        <div className=\"blog-cards__header\">\n          {this.renderMainCard()}\n        </div>\n        <div className=\"blog-cards__list\">\n          {this.state.selectedEntity.map((entity: Entity, index: number) => this.renderBlogsCard(index, entity.subject, entity.blogs))}\n        </div>\n\n      </div>\n    );\n  }\n};\n\nexport default SelectCardList;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { config  } from '../../../config';\nimport SelectCardList from '../common/SelectCardList';\n\n\ninterface State {\n\n}\n\ninterface Props {\n  location: any;\n};\n\nclass Sites extends React.Component<Props, State> {\n  endpoint: string = config.endpoints.blog.countries;\n  filters = {country: null};\n  state = {\n    sites: []\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      sites: this.props.location.state?.countries || null,\n    }\n  }\n\n  render() {\n    return (\n      <SelectCardList endpoint={this.endpoint} filters={this.filters}  initData={this.state.sites}></SelectCardList>\n    );\n  }\n};\n\nexport default connect()(Sites);\n","import React, { useState } from 'react';\nimport { useParams } from \"react-router-dom\";\n\nimport './Entry.scss';\n\nimport { config  } from '../../../config';\nimport HttpService from '../../../shared/services/HttpService';\nimport { Blog } from '../../../shared/interfaces/blog';\n\n\ninterface Props {\n  match: any;\n};\n\ninterface State {\n  blog: Blog;\n}\n\n\nclass Entry extends React.Component<Props, State> {\n  _httpService: HttpService = new HttpService();\n  state = {\n    blog: {id: 0, content: '', user_id: 0, title: \"\", cooperators: null, photo_names: null, views: 0, country: \"Poland\"},\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    this.getBlog(id);\n  }\n\n  getBlog(id: number) {\n    const url = `${config.endpoints.blog.base}${id}/`;\n    this._httpService.get(url).then((response: Blog) => {\n      this.setState({\n        ...this.state,\n        blog: response,\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"entry\">\n        {this.state.blog.content}\n      </div>\n    );\n  }\n};\n\nexport default Entry;","import React from 'react';\n\nimport './Authors.scss';\n\nimport { config  } from '../../../config';\nimport SelectCardList from '../common/SelectCardList';\nimport { User } from '../../../shared/interfaces/user';\n\n\ninterface Props {\n  location: any;\n};\n\ninterface State {\n  authors: User[];\n}\n\n\nclass Authors extends React.Component<Props, State> {\n  endpoint: string = config.endpoints.blog.authors;\n  filters = {user_id: 'id'};\n  selector: string = 'username';\n  state = {\n    authors: []\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      authors: this.props.location.state?.authors || null,\n    }\n  }\n\n  render() {\n    return (\n      <SelectCardList endpoint={this.endpoint} selector={this.selector} filters={this.filters} initData={this.state.authors}></SelectCardList>\n    );\n  }\n};\n\nexport default Authors;","import React from 'react';\n\nimport './Dashboard.scss';\n\nimport HttpService from '../../shared/services/HttpService';\nimport { Blog } from '../../shared/interfaces/blog';\nimport { User } from '../../shared/interfaces/user';\nimport { config } from '../../config';\nimport { Link } from 'react-router-dom';\n\n\ninterface State {\n  latestBlogs: Blog[];\n  mostSeenBlogs: Blog[];\n  topSeenAuthors: User[];\n  mostSeenCountries: string[];\n}\n\ninterface Props {\n\n}\n\nclass Dashboard extends React.Component<Props, State> {\n  private _httpService: HttpService = new HttpService();\n  state = {\n    latestBlogs: [],\n    mostSeenBlogs: [],\n    topSeenAuthors: [],\n    mostSeenCountries: [],\n  };\n\n  componentDidMount() {\n    this.getMostSeenBlogs();\n    this.getLatestBlogs();\n    this.getTopSeenAuthors();\n    this.getMostSeenCountries();\n  }\n\n  getMostSeenBlogs() {\n    const url = config.endpoints.blog.base;\n    const params = {limit: 5, ordering: '-views'};\n    this._httpService.get(url, params).then((response: Blog[]) => {\n      this.setState({\n        mostSeenBlogs: response,\n      })\n    }).catch(err => {});\n  }\n\n  getLatestBlogs() {\n    const url = config.endpoints.blog.base;\n    const params = {limit: 5};\n    this._httpService.get(url, params).then((response: Blog[]) => {\n      this.setState({\n        latestBlogs: response,\n      })\n    }).catch(err => {});\n  }\n\n  getTopSeenAuthors() {\n    const url = config.endpoints.blog.authors;\n    const params = {limit: 5, ordering: '-views'};\n    this._httpService.get(url, params).then((response: User[]) => {\n      this.setState({\n        topSeenAuthors: response,\n      })\n    }).catch(err => {});\n  }\n\n  getMostSeenCountries() {\n    const url = config.endpoints.blog.countries;\n    const params = {limit: 5, ordering: '-views'};\n    this._httpService.get(url, params).then((response: string[]) => {\n      this.setState({\n        mostSeenCountries: response,\n      })\n    }).catch(err => {});\n  }\n\n  render() {\n    return (\n      <div className=\"blog-dashboard\">\n        <div className=\"blog-dashboard__table blog-dashboard__most-seen-blogs\">\n          <header>Most seen blogs</header>\n          {this.state.mostSeenBlogs.map((blog: Blog) => {\n            return (\n              <Link to={config.routes.blog.detail(blog.id)} className=\"blog-dashboard__list-elem-link\" key={blog.id}>\n                <div>{blog.title}</div>\n              </Link>\n            )\n          })}\n        </div>\n\n        <div className=\"blog-dashboard__table blog-dashboard__latest-blogs\">\n          <header>Latest blogs</header>\n          {this.state.latestBlogs.map((blog: Blog) => {\n            return (\n              <Link to={config.routes.blog.detail(blog.id)} className=\"blog-dashboard__list-elem-link\" key={blog.id}>\n                <div>{blog.title}</div>\n              </Link>\n            )\n          })}\n        </div>\n\n        <div className=\"blog-dashboard__table blog-dashboard__top-seen-authors\">\n          <header className=\"blog-dashboard__header-action\">\n            <div>Top 5 seen authors</div>\n            <div>\n              <Link to={{\n                pathname: config.routes.blog.authors,\n                state: {\n                  authors: this.state.topSeenAuthors\n                }}}\n              >\n                Go to\n              </Link>\n            </div>\n          </header>\n          {this.state.topSeenAuthors.map((user: User, index: number) => {\n            return (\n              <div key={index}>{user.username}</div>\n            )\n          })}\n        </div>\n\n        <div className=\"blog-dashboard__table blog-dashboard__most-seen-countries\">\n          <header className=\"blog-dashboard__header-action\">\n            <div>Most seen countries</div>\n            <Link to={{\n                pathname: config.routes.blog.sites,\n                state: {\n                  countries: this.state.mostSeenCountries\n                }}}\n              >\n                Go to\n              </Link>\n          </header>\n          {this.state.mostSeenCountries.map((country: string, index: number) => {\n            return (\n              <div key={index}>{country}</div>\n            )\n          })}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Dashboard;","export function setOpenLoginDialog(open: boolean) {\n  return {type: 'OPEN_LOGIN', value: open};\n}","export function setToken(value: string) {\n  return {type: 'SET_TOKEN', value};\n}\n\nexport function resetToken() {\n  return {type: 'SET_TOKEN', value: ''};\n}","import { User } from \"../shared/interfaces/user\";\n\nexport function setUserData(user: User) {\n  return {type: 'SET_USER_DATA', data: user};\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport './Sidebar.scss';\n\nimport { config } from '../../config';\nimport { setOpenLoginDialog } from '../../actions/login-dialog';\nimport { User } from '../../shared/interfaces/user';\nimport { resetToken } from '../../actions/token';\nimport { notifySuccess } from '../../actions/notify';\nimport { setUserData } from '../../actions/user';\n\n\n\ninterface Props {\n  setOpenLoginDialog: (open: boolean) => void;\n  resetToken: () => void;\n  setUserData: (data: User) => void;\n  notifySuccess: (msg: string) => void;\n  user: User;\n  token: string;\n  children: any;\n}\n\ninterface State {\n  user?: User;\n  token?: string;\n}\n\nconst BlogSidebarComponent = (props: Props) =>  {\n  const handleLogin = () => {\n    if (props.token) {\n      props.resetToken();\n      props.setUserData({});\n      props.notifySuccess('Logout confirmed');\n    } else {\n      props.setOpenLoginDialog(true);\n    }\n  };\n\n  const renderLoginButton = () => {\n    return props.token ? \"Logout\" : \"Login\";\n  };\n\n  const renderNav = () => {\n    return (\n      <div className=\"blog__sidebar\">\n        <div className=\"blog__top\">\n          <Link to=\"/\" className=\"blog__name\">Blog</Link>\n          <div className=\"blog__navs\">\n            <Link to={config.routes.blog.dashboard} className=\"\">Dashboard</Link>\n            <Link to={config.routes.blog.authors} className=\"\">Authors</Link>\n            <Link to={config.routes.blog.sites} className=\"\">Sites</Link>\n            <Link to={config.routes.blog.addNew} className=\"\">Add blog</Link>\n          </div>\n        </div>\n        <div className=\"blog__bottom\">\n          <div className=\"blog__login\" onClick={() => handleLogin()}>\n            {renderLoginButton()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"blog\">\n      {renderNav()}\n      <div className=\"blog__main\">\n        {props.children}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => {\n  return {\n    user: state.user,\n    token: state.token,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setOpenLoginDialog: (open: boolean) => dispatch(setOpenLoginDialog(open)),\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg)),\n    resetToken: () => dispatch(resetToken()),\n    setUserData: (data: User) => dispatch(setUserData(data)),\n  };\n};\n\nexport const BlogSidebar = connect(mapStateToProps, mapDispatchToProps)(BlogSidebarComponent);","export interface Profile {\n    location?: string;\n    facebook_id?: string;\n    facebook_name?: string;\n}\n\nexport interface User {\n    id? :number;\n    username?: string;\n    first_name?: string;\n    last_name?: string;\n    profile?: Profile;\n}\n\nexport enum RegisterFormType {\n    NONE,\n    FRAGMENTARY,\n    FULL,\n}","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { notifyError } from '../../actions/notify';\nimport { User } from '../interfaces/user';\nimport { Redirect, Route } from 'react-router-dom';\n\n\ninterface State {\n  user: User;\n}\n\ninterface Props {\n  children: any;\n  user: User;\n  app: string;\n  notifyError: (msg: string) => void;\n}\n\nconst Guard = ({ component: Component, user, app, notifyError, ...rest }) => {\n  const redirectWrongLogin = () => {\n    notifyError('Please sign in to have full access!');\n    return <Redirect to={{\n      pathname: `/${app}`,\n    }} />\n  };\n\n  return <Route {...rest} render={(props) => (\n    user?.username\n    ? <Component {...props} />\n    : redirectWrongLogin()\n  )} />\n}\n\n\n\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    notifyError: (msg: string) => dispatch(notifyError(msg)),\n  };\n};\n\nconst mapStateToProps = (state: State) => {\n  return {\n    user: state.user,\n  };\n}\n\nexport const AuthGuard = connect(mapStateToProps, mapDispatchToProps)(Guard);","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport './Blog.scss';\n\nimport { config } from '../../config';\nimport AddForm  from './add/Add';\nimport Sites from './cards/Sites';\nimport Entry from './detail/Entry';\nimport Authors from './cards/Authors';\nimport Dashboard from './Dashboard';\nimport { BlogSidebar } from './Sidebar';\nimport { AuthGuard } from '../../shared/guards/AuthGuard'\n\n\ninterface Props {\n\n}\n\nconst BlogComponent = (props: Props) => {\n  const renderContent = () => {\n    return (\n      <Switch>\n          <Route path={config.routes.blog.dashboard} exact component={Dashboard} />\n          <Route path={config.routes.blog.authors} component={Authors} />\n          {/* <Route path={config.routes.blog.addNew} component={AddForm} /> */}\n          <AuthGuard path={config.routes.blog.addNew} component={AddForm} app=\"blog\" />\n          <Route path={config.routes.blog.sites} component={Sites} />\n          <Route path={config.routes.blog.detail()} component={Entry} />\n      </Switch>\n    )\n  }\n\n  return (\n    <BlogSidebar>\n      {renderContent()}\n    </BlogSidebar>\n  )\n}\n\nexport const Blog = connect(null)(BlogComponent);","import React from 'react';\nimport './Forum.scss';\n\n\nexport class Forum extends React.Component {\n    render() {\n        return (\n            <div>for</div>\n        )\n    }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Dashboard.scss';\n\n\nexport class Dashboard extends React.Component {\n\n  render() {\n    return (\n      <div className=\"container__dashboard\">\n          <div className=\"part part--1\">\n            <Link to=\"/blog\" className=\"part__link link\">\n              <div className=\"part__quarter part__quarter--1\">\n                <div className=\"part__name part__name--1\">\n                  blog\n                </div>\n              </div>\n            </Link>\n          </div>\n          <div className=\"part part--2\">\n            <Link to=\"/photos\" className=\"part__link link\">\n              <div className=\"part__quarter part__quarter--2\">\n                <div className=\"part__name part__name--2\">\n                  photos\n                </div>\n              </div>\n            </Link>\n          </div>\n          <div className=\"part part--3\">\n            <Link to=\"/forum\" className=\"part__link link\">\n              <div className=\"part__quarter part__quarter--3\">\n                <div className=\"part__name part__name--3\">\n                  forum\n                </div>\n              </div>\n            </Link>\n          </div>\n          <div className=\"part part--4\">\n            <div className=\"part__bg-video\">\n              {/* <ReactPlayer url='containers/movies.mp4' className=\"part__bg-video--content\" lopp playing muted controls/> */}\n              <video className=\"part__bg-video--content\" autoPlay muted loop>\n                <source src=\"movie-dashboard.mp4\" type=\"video/mp4\"></source>\n                <source src=\"movie-dashboard-2.webm\" type=\"video/webm\"></source>\n                Sorry, your browser doesn't support embedded videos.\n              </video>\n              <div className=\"part__bg-video--gradient\"></div>\n            </div>\n            <Link to=\"/movies\" className=\"part__link link\">\n              <div className=\"part__quarter part__quarter--4\">\n                <div className=\"part__name part__name--4\">\n                  movies\n                </div>\n              </div>\n            </Link>\n          </div>\n      </div>\n    );\n  }\n};","import React from 'react';\n\n\nexport const Photos = (props: any) => {\n  return (\n    <div>\n      heh\n    </div>\n  );\n};","import React from 'react';\n\n\nexport const Movies = (props: any) => {\n  return (\n    <div></div>\n  );\n};","import React from 'react';\n\n\nexport const NotFound = (props: any) => {\n  return (\n    <div>\n      404\n    </div>\n  );\n};","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport FacebookLogin from 'react-facebook-login';\nimport { config } from '../../config';\nimport { setToken } from '../../actions/token';\nimport { RegisterFormType } from '../../shared/interfaces/user';\nimport HttpService from '../../shared/services/HttpService';\n\n\ninterface FacebookDataPicture {\n  height: number;\n  is_silhouette: boolean;\n  url: string;\n  width: number;\n}\n\ninterface FacebookPicture {\n  data: FacebookDataPicture;\n}\n\ninterface FacebookResponse {\n  status: string;\n  name: string;\n  picture: FacebookPicture;\n  id: string;\n  accessToken: string;\n  userID: string;\n  expiresIn: 3945;\n  signedRequest: string;\n  graphDomain: 'facebook';\n  data_access_expiration_time: number;\n}\n\ninterface Props {\n  setToken: (token: string) => void;\n  handleClose: (logged: boolean) => void;\n  setRegistration: (type: number) => void;\n  fbCssClass: string;\n}\n\nexport const FacebookComponent = (props: Props) => {\n  const _httpService: HttpService = new HttpService();\n\n  const responseFacebook = (responseFb: FacebookResponse) => {\n    const url = config.endpoints.auth.exists_fb;\n    _httpService.get(`${url}?fb_id=${responseFb.userID}`).then(response => {\n      const exists = response.exists;\n      if (exists) {\n        props.setToken(responseFb.accessToken);\n        props.handleClose(true);\n      } else {\n        props.setRegistration(RegisterFormType.FRAGMENTARY);\n      }\n    }).catch(err => {});\n  }\n\n  const componentClicked = () => {\n  }\n\n  const facebookData = (<FacebookLogin\n    cssClass={props.fbCssClass}\n    appId=\"3136029376407498\"\n    autoLoad={false}\n    fields=\"name,picture,email\"\n    onClick={componentClicked}\n    callback={responseFacebook} />\n  );\n\n  return (\n      <div>{facebookData}</ div>\n  )\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setToken: (token: string) => dispatch(setToken(token)),\n  };\n};\n\nexport const Facebook = connect(null, mapDispatchToProps)(FacebookComponent);\n","import React, {useState} from 'react';\nimport { connect } from 'react-redux';\nimport { Facebook } from './Facebook';\n\nimport './LoginForm.scss';\n\nimport { notifySuccess, notifyError } from '../../actions/notify';\nimport { setToken } from '../../actions/token';\nimport { RegisterFormType } from '../../shared/interfaces/user';\nimport { config  } from \"../../config\";\nimport HttpService from '../../shared/services/HttpService'\nimport { InputWidget, ErrorWidget } from 'widgets';\n\n\ninterface Props {\n  setToken: (token: string) => void;\n  handleClose: (logged: boolean) => void;\n  notifySuccess: (msg: string) => void;\n  setRegistration: (type: number) => void;\n}\n\ninterface State {\n}\n\ninterface Credentials {\n  username: string;\n  password: string;\n}\n\nexport const LoginFormComponent = (props: Props) => {\n  const _httpService: HttpService = new HttpService();\n  const [credentials, setCredentials] = useState<Credentials>({username: '', password: ''});\n  const [validationError, setValidationError] = useState<{valid: boolean, msg: string}>({valid: true, msg: \"Username and password must be filled\"});\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n    if (credentials.username && credentials.password) {\n      const url = config.endpoints.auth.login;\n      _httpService.post(url, credentials).then(response => {\n        props.setToken(response.token);\n        props.handleClose(true);\n        props.notifySuccess('Now you are logged in!');\n      }).catch(err => {});\n    } else {\n      setNonValid();\n    }\n  }\n\n  const setNonValid = () => {\n    setValidationError({\n      ...validationError,\n      valid: false,\n    });\n    setTimeout(() => setValidationError({\n      ...validationError,\n      valid: true,\n    }), 4000)\n  }\n\n  const onUsernameChange = (value: string) => {\n    setCredentials({\n      ...credentials,\n      username: value\n    });\n  }\n\n  const onPasswordChange = (value: string) => {\n    setCredentials({\n      ...credentials,\n      password: value\n    });\n  }\n\n  return (\n    <div className=\"login\">\n      <Facebook fbCssClass=\"login__fb-btn\" handleClose={props.handleClose} setRegistration={props.setRegistration}/>\n      <form className=\"login__form\" onSubmit={(e) => handleSubmit(e)}>\n        <div className=\"form-field\">\n          <InputWidget placeholder=\"Username\" onChange={(value: string) => onUsernameChange(value)}/>\n        </div>\n        <div className=\"form-field\">\n          <InputWidget type=\"password\" placeholder=\"Password\" onChange={(value: string) => onPasswordChange(value)}/>\n        </div>\n        <ErrorWidget text={validationError.valid ? \"\" : validationError.msg}/>\n        <div className=\"login__actions\">\n          {/* <ButtonWidget type={\"button\"} onClick={(e) => props.setRegistration(RegisterFormType.FULL)} text={\"Sign up\"}/>\n          <ButtonWidget type={\"submit\"} text={\"Login\"}/> */}\n          <button className=\"login__signup-btn\" type=\"button\" onClick={(e) => props.setRegistration(RegisterFormType.FULL)}>Sign up</button>\n          <button className=\"login__signin-btn\" type=\"submit\">Login</button>\n        </div>\n      </form>\n    </div>\n    )\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setToken: (token: string) => dispatch(setToken(token)),\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg)),\n  };\n};\n\nexport const LoginForm = connect(null, mapDispatchToProps)(LoginFormComponent);","import React, { useState } from 'react';\nimport { useForm, ErrorMessage } from \"react-hook-form\";\nimport { connect } from 'react-redux';\n\nimport './RegisterForm.scss';\n\nimport { notifySuccess } from '../../actions/notify';\nimport { User, Profile, RegisterFormType } from '../../shared/interfaces/user';\nimport { config  } from \"../../config\";\nimport HttpService from '../../shared/services/HttpService'\nimport { InputWidget, ErrorWidget } from 'widgets';\n\ninterface Props {\n  user: User;\n  registerType: number;\n  notifySuccess: (msg: string) => void;\n  setRegistration: (register: number) => void;\n}\n\ninterface State {\n  user: User;\n}\n\ninterface Account {\n  username?: string;\n  password?: string;\n  passwordConfirmation?: string;\n  email?: string;\n  profile?: Profile;\n}\n\nexport const RegisterFormComponent = (props: Props) => {\n  const _httpService: HttpService = new HttpService();\n  const [validationError, setValidationError] = useState<{valid: boolean, msg: string}>({valid: true, msg: \"Passwords must be the same\"});\n  const {register, setValue, handleSubmit, errors} = useForm<Account>();\n\n  const onSubmit = handleSubmit((data: Account) => {\n    if (data.password !== data.passwordConfirmation) {\n      setValidationError({\n        ...validationError,\n        valid: false\n      });\n      setTimeout(() => setValidationError({\n        ...validationError,\n        valid: true,\n      }), 4000)\n    } else {\n      delete data.passwordConfirmation;\n      data = {...data, profile: {facebook_id: props.user.profile?.facebook_id}};\n      const url = config.endpoints.auth.register\n      _httpService.post(url, data).then(reponse => {\n        props.setRegistration(RegisterFormType.NONE);\n        props.notifySuccess('Register successfully! Login again to authenticate yourself')\n      }).catch(err => {\n\n      })\n    }\n  });\n\n  const renderAdditionalFields = () => {\n    return (\n      <div className=\"register-form__additional-fields\">\n        <div className=\"form-field\">\n          <InputWidget type=\"password\" placeholder=\"Password\" name=\"password\" refe={register({required: true})}/>\n        </div>\n        <ErrorWidget text={errors.password ? \"Password is required!\" : \"\"}/>\n        <div className=\"form-field\">\n          <InputWidget type=\"password\" placeholder=\"Password Confirmation\" name=\"passwordConfirmation\" refe={register({required: true})}/>\n        </div>\n        <ErrorWidget text={errors.passwordConfirmation ? \"Password confirmation is required!\" : \"\"}/>\n        <ErrorWidget text={validationError.valid ? \"\" : validationError.msg}/>\n        <div className=\"form-field\">\n          <InputWidget type=\"email\" placeholder=\"Email\" name=\"email\" refe={register({required: true})}/>\n        </div>\n        <ErrorWidget text={errors.email ? \"Email is required!\" : \"\"}/>\n      </div>\n    )\n  }\n\n  const renderBasicFields = () => {\n    return (\n      <div className=\"register-form__basic-fields\">\n        <div className=\"form-field\">\n          <InputWidget placeholder=\"Username\" name=\"username\" refe={register({required: true})}/>\n        </div>\n        <ErrorWidget text={errors.username ? \"Username is required!\" : \"\"}/>\n      </div>\n    )\n  }\n\n  const renderActions = () => {\n    return (\n      <div className=\"register-form__actions\">\n        <button type=\"button\" onClick={(e) => props.setRegistration(RegisterFormType.NONE)}>Back</button>\n        <button type=\"submit\">Register</button>\n      </div>\n    )\n  }\n\n  return (\n    <form className=\"register-form\" onSubmit={onSubmit}>\n      {renderBasicFields()}\n      {props.registerType === RegisterFormType.FULL ? renderAdditionalFields() : <></>}\n      {renderActions()}\n    </form>\n  );\n};\n\nconst mapStateToProps = (state: State) => {\n  return {\n    user: state.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg)),\n  };\n};\n\nexport const RegisterForm = connect(mapStateToProps, mapDispatchToProps)(RegisterFormComponent);","import React from 'react';\nimport { CloseOutlined } from '@material-ui/icons';\n\nimport './Dialog.scss';\n\n\ninterface Props {\n    onClose: () => void;\n    open: boolean;\n    children?: any;\n    title?: string;\n}\n\nexport const Dialog = (props: Props) => {\n\n  const onBackgroundClick = (event) => {\n    if(event.target === event.currentTarget) {\n        props.onClose();\n    }\n  }\n\n  return (\n    <div className={`dialog ${props.open ? 'dialog--show' : ''}`} onClick={(e) => onBackgroundClick(e)}>\n      <div className=\"dialog__box\">\n        <CloseOutlined className=\"dialog__exit-icon\" fontSize=\"large\" onClick={props.onClose} />\n        <h3 className=\"dialog__title\">{props.title}</h3>\n        {props.children}\n      </div>\n    </div>\n  );\n};","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport './LoginDialog.scss';\n\nimport { setOpenLoginDialog } from '../../actions/login-dialog';\nimport { LoginForm } from './LoginForm';\nimport { RegisterForm } from './RegisterForm';\nimport { User, RegisterFormType } from '../../shared/interfaces/user';\nimport { Dialog } from '../../shared/components/Dialog';\nimport { config  } from \"../../config\";\nimport HttpService from '../../shared/services/HttpService';\nimport { setUserData } from '../../actions/user';\n\n\ninterface Props {\n  setOpenLoginDialog: (open: boolean) => void;\n  setUserData: (data: User) => void;\n  isOpenLoginDialog: boolean;\n  user: User;\n  token: string;\n}\n\ninterface State {\n  isOpenLoginDialog: boolean;\n  user: User;\n  token: string;\n}\n\nconst LoginComponent = (props: Props) => {\n  const _httpService: HttpService = new HttpService();\n  const [isRegistration, setRegistration] = useState<number>(RegisterFormType.NONE);\n\n  const getUserData = () => {\n    _httpService.get(config.endpoints.auth.me).then((response: User) => {\n      props.setUserData(response);\n    })\n  }\n\n  const handleClose = (logged: boolean = false) => {\n    setRegistration(RegisterFormType.NONE);\n    props.setOpenLoginDialog(false);\n    if (logged) getUserData();\n  };\n\n  const renderRegisterForm = () => {\n    return (\n      <RegisterForm setRegistration={setRegistration} registerType={isRegistration}></RegisterForm>\n    )\n  }\n\n  const renderLoginForm = () => {\n    return (\n      <LoginForm handleClose={handleClose} setRegistration={setRegistration}></LoginForm>\n    )\n  }\n\n  return (\n    <Dialog onClose={() => handleClose()} open={props.isOpenLoginDialog} title={isRegistration ? 'Sign up' : 'Login'}>\n      {isRegistration ? renderRegisterForm() : renderLoginForm()}\n    </Dialog>\n  );\n};\n\nconst mapStateToProps = (state: State) => {\n  return {\n    isOpenLoginDialog: state.isOpenLoginDialog,\n    user: state.user,\n    token: state.token,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setOpenLoginDialog: (open: boolean) => dispatch(setOpenLoginDialog(open)),\n    setUserData: (data: User) => dispatch(setUserData(data)),\n  };\n};\n\nexport const LoginDialog = connect(mapStateToProps, mapDispatchToProps)(LoginComponent);\n","import axios, { AxiosResponse, AxiosError } from 'axios';\n\n\nclass ErrorResponseInterceptor {\n  staticMessages = {\n    504: 'Problem with server connection',\n    0: 'Unrecognized error',\n  }\n\n  initInterceptor(notifyError: (msg: string) => void) {\n    axios.interceptors.response.use((config: AxiosResponse) => {\n      return config;\n    }, (error: AxiosError) => {\n      const status = error.response?.status || 0;\n      let msg = this.staticMessages[status];\n      const data = error.response?.data;\n      msg = msg || data.message || (data.non_field_errors && data.non_field_errors[0]) || this.staticMessages['0'];\n      console.log(msg)\n      if (msg.length) {\n        notifyError(msg);\n        throw new Error(msg);\n      }\n    })\n  }\n}\n\nexport default ErrorResponseInterceptor;","import axios, { AxiosRequestConfig } from 'axios';\n\n\nclass TokenInterceptor {\n  initInterceptor() {\n    axios.interceptors.request.use((config: AxiosRequestConfig) => {\n      const token = localStorage.getItem('token');\n      let headers = {...config.headers};\n      if (token) {\n        headers = {\n          ...headers,\n          'Authorization': `Token ${token}`\n        }\n        config = {\n          ...config,\n          headers\n        }\n      }\n      return config;\n    });\n  }\n}\n\nexport default TokenInterceptor;","import ErrorResponseInterceptor from \"./response_error.interceptor\";\nimport TokenInterceptor from \"./token.interceptor\";\n\nclass Interceptor {\n  private _errInterceptor: ErrorResponseInterceptor = new ErrorResponseInterceptor();\n  private _tokenInterceptor: TokenInterceptor = new TokenInterceptor();\n\n  initInterceptors(notifyError: (msg: string) => void) {\n    this._errInterceptor.initInterceptor(notifyError);\n    this._tokenInterceptor.initInterceptor();\n  }\n}\n\nexport default Interceptor;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport NotificationSystem from 'react-notification-system';\n\nimport './App.scss';\nimport { Notification } from '../shared/interfaces/notification.interface';\n\nimport { Blog } from './Blog/Blog';\nimport { Forum } from './Forum/Forum';\nimport { Dashboard } from './Dashboard/Dashboard';\nimport { Photos } from './Photos/Photos';\nimport { Movies } from './Movies/Movies';\nimport { NotFound } from '../shared/components/NotFound';\nimport { LoginDialog } from './Login/LoginDialog';\nimport { notifyError } from '../actions/notify';\nimport Interceptor from '../shared/interceptors/interceptor';\nimport { setToken } from '../actions/token';\nimport { setUserData } from '../actions/user';\nimport { User } from '../shared/interfaces/user';\nimport HttpService from '../shared/services/HttpService';\nimport { config } from '../config';\n\n\ninterface State {\n  notify: Notification;\n}\n\ninterface Props {\n  notify: Notification;\n  notifyError: (msg: string) => void;\n  setToken: (token: string) => void;\n  setUserData: (data: User) => void;\n}\n\nclass App extends React.Component <Props, State> {\n  private _httpService: HttpService = new HttpService();\n  private _interceptor: Interceptor = new Interceptor();\n  private _notificationSystem = React.createRef();\n  private _notificationStyle = {\n    NotificationItem: {\n      DefaultStyle: {\n        fontSize: '2rem',\n      },\n    }\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this._interceptor.initInterceptors(props.notifyError);\n    const token = localStorage.getItem('token');\n    props.setToken(token || '');\n    if (token) this.getUserData();\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State, snapshot: any) {\n    const notification = this.props.notify;\n    if (prevProps.notify !== notification) {\n      this.addNotification(notification.msg, notification.type);\n    }\n  }\n\n  getUserData() {\n    this._httpService.get(config.endpoints.auth.me).then((response: User) => {\n      this.props.setUserData(response);\n    }).catch(err => {});\n  }\n\n  addNotification = (msg: string, level: string) => {\n    const notification: any = this._notificationSystem.current;\n    notification.addNotification({\n      message: msg,\n      level: level\n    });\n  };\n\n  renderRouter() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path=\"/\" exact component={Dashboard} />\n          <Route path=\"/blog\" component={Blog} />\n          <Route path=\"/photos\" component={Photos} />\n          <Route path=\"/forum\" component={Forum} />\n          <Route path=\"/movies\" component={Movies} />\n          <Route path=\"*\" component={NotFound} />\n        </Switch>\n      </Router>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        {this.renderRouter()}\n        <NotificationSystem ref={this._notificationSystem} style={this._notificationStyle}/>\n        <LoginDialog />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State) => {\n  return {\n      notify: state.notify,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    notifyError: (msg: string) => dispatch(notifyError(msg)),\n    setToken: (token: string) => dispatch(setToken(token)),\n    setUserData: (data: User) => dispatch(setUserData(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Notification } from '../shared/interfaces/notification.interface';\n\n\nconst initialState = {\n  type: 'INFO',\n  msg: 'INFO'\n}\n\nconst notify = (state: Notification = initialState, action: Notification) => {\n  if (['info', 'success', 'warning', 'error'].includes(action.type)) {\n    state = {\n      ...state,\n      type: action.type,\n      msg: action.msg\n    }\n  }\n  return state;\n};\n\nexport default notify;\n","const initialState: string = '';\n\ninterface Action {\n  type: string;\n  value: string;\n};\n\nconst token = (state: string = initialState, action: Action) => {\n  switch (action.type) {\n    case 'SET_TOKEN' :\n      localStorage.setItem('token', action.value ? action.value : '');\n      state = action.value;\n    break;\n  }\n  return state;\n};\n\nexport default token;","import { User, Profile } from \"../shared/interfaces/user\";\n\n\nconst profile: Profile = {\n  location: '',\n  facebook_id: '',\n  facebook_name: '',\n}\n\nconst initialState: User = {\n    username: '',\n    profile: profile,\n};\n\ninterface Action {\n  type: string;\n  data: User;\n};\n\n\nconst user = (state: User = initialState, action: Action) => {\n  switch (action.type) {\n    case 'SET_USER_DATA' :\n      state = {...action.data};\n    break;\n  }\n  return state;\n};\n\nexport default user;","\nconst initialState = false;\n\ninterface Action {\n  type: string,\n  value: boolean\n};\n\nconst isOpenLoginDialog = (state: boolean = initialState, action: Action) => {\n  switch (action.type) {\n    case 'OPEN_LOGIN' :\n      state = action.value;\n    break;\n  }\n  return state;\n};\n\nexport default isOpenLoginDialog;","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\n\nimport notify from './reducers/notify';\nimport token from './reducers/token';\nimport user from './reducers/user';\nimport isOpenLoginDialog from './reducers/login-dialog';\n\nexport default createStore(\n  combineReducers({\n      notify,\n      isOpenLoginDialog,\n      user,\n      token,\n  }), {}, applyMiddleware(createLogger())\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\nimport store from './store';\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}