{"version":3,"sources":["serviceWorker.js","config.tsx","actions/login-dialog.tsx","actions/token.tsx","actions/notify.tsx","actions/user.tsx","shared/interfaces/blog.tsx","components/Blog/Sidebar.tsx","shared/guards/AuthGuard.tsx","shared/components/widgets/button/button.tsx","shared/components/widgets/selectFile/selectFile.tsx","components/Blog/account/Account.tsx","configAxios.tsx","shared/services/HttpService.tsx","shared/services/blog.service.tsx","shared/components/widgets/select/select.tsx","shared/components/widgets/selectMult/selectMult.tsx","components/Blog/add/Add.tsx","components/Blog/common/SelectCardList.tsx","components/Blog/cards/Sites.tsx","shared/services/user.service.tsx","components/Blog/detail/Entry.tsx","components/Blog/cards/Authors.tsx","components/Blog/Dashboard.tsx","shared/components/widgets/input/input.tsx","components/Blog/account/changePassword/ChangePassword.tsx","components/Blog/account/editProfile/EditProfile.tsx","components/Blog/account/admin/Admin.tsx","shared/interfaces/user.tsx","components/Blog/Blog.tsx","components/Forum/Forum.tsx","components/Dashboard/Dashboard.tsx","components/Photos/Photos.tsx","components/Movies/Movies.tsx","shared/components/NotFound.tsx","components/Login/Facebook.tsx","shared/components/widgets/error/error.tsx","components/Login/LoginForm.tsx","components/Login/RegisterForm.tsx","shared/components/Dialog.tsx","components/Login/LoginDialog.tsx","shared/interceptors/response_error.interceptor.tsx","shared/interceptors/token.interceptor.tsx","shared/interceptors/interceptor.tsx","components/App.tsx","reducers/notify.tsx","reducers/token.tsx","reducers/user.tsx","reducers/login-dialog.tsx","store.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","routeName","baseUrlConfigProd","account","blog","countries","getBaseUrlConfig","name","config","tokenKey","endpoints","auth","login","me","exists_fb","register","users","authors","base","routes","root","dashboard","sites","addNew","profile","detail","id","setOpenLoginDialog","open","type","value","setToken","notifySuccess","msg","notifyError","setUserData","user","data","ElementType","BlogSidebarComponent","_ref","React","createRef","state","showSidebar","showNavbar","this","isAppropriateWidth","setState","innerWidth","toggleSidebar","handleToggleSidebarIfSmallScreen","props","token","resetToken","className","ref","to","onClick","username","handleLogin","renderLoginButton","fontSize","renderSidebar","renderNavbar","children","Component","BlogSidebar","connect","dispatch","AuthGuard","component","app","rest","render","pathname","ButtonWidget","text","SelectFileWidget","useState","selectedFile","setSelectedFile","renderImage","src","URL","createObjectURL","classResize","uploadIcon","style","verticalAlign","marginRight","htmlFor","orderNumber","accept","onChange","e","file","target","files","onFileChange","PanelCondition","axios","originAxios","create","baseURL","process","HttpService","url","params","get","then","response","post","delete","put","BlogService","_httpService","seperator","separatorHelper","elements","map","elem","join","contentStr","filenamesStr","content","split","forEach","filename","tmpContent","replace","push","PARAGRAPH","IMAGE","is_active","newParams","rawData","FormData","filter","el","console","log","append","formattedContent","formatContent","set","title","headers","SelectWidget","selected","endpoint","getData","catch","err","event","Number","changeValue","handleSelectChange","disabled","placeholder","entity","index","key","SelectMultipleWidget","setSelected","newSelected","handleChange","s","i","AddForm","_service","addElement","array","splice","preventDefault","postBlog","clearState","history","rows","onParagraphValueChange","renderParagraph","renderSelectImage","renderToolAction","removeButton","length","removeElement","addNewParagraph","addNewImage","onSubmit","renderSettings","renderPartForm","withRouter","SelectCardList","subjects","selectedEntity","loading","initData","mapSubjects","selector","subject","getBlogs","getSubjects","error","includes","filters","getActivatedBlogs","blogs","find","keyId","Card","CardContent","CardActions","handleRemoveSubjectBlogs","LinearProgress","handleSubjectSelectChange","renderMainCard","renderBlogsCard","Sites","country","UserService","ids","Entry","_userService","user_id","cooperators","photo_names","views","add_date","update_date","main","support","getBlog","unformatContent","getAuthorsNames","getUsers","removeBlog","alt","Authors","Dashboard","latestBlogs","mostSeenBlogs","topSeenAuthors","mostSeenCountries","getMostSeenBlogs","getLatestBlogs","getTopSeenAuthors","getMostSeenCountries","limit","ordering","InputWidget","refe","ChangePassword","useForm","handleSubmit","setValue","errors","required","EditProfile","Admin","setBlogs","useEffect","activateBlog","res","RegisterFormType","panels","condition","isSuperuser","Account","Object","keys","cond","is_superuser","manageCondition","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","Blog","path","exact","Forum","autoPlay","muted","loop","Photos","Movies","NotFound","Facebook","facebookData","cssClass","fbCssClass","appId","autoLoad","fields","callback","responseFb","userID","exists","accessToken","handleClose","setRegistration","FRAGMENTARY","ErrorWidget","customStyle","LoginForm","password","credentials","setCredentials","valid","validationError","setValidationError","setNonValid","setTimeout","onUsernameChange","onPasswordChange","FULL","RegisterForm","passwordConfirmation","facebook_id","reponse","NONE","registerType","email","Dialog","currentTarget","onClose","CloseOutlined","LoginDialog","isOpenLoginDialog","isRegistration","getUserData","logged","ErrorResponseInterceptor","staticMessages","504","0","interceptors","use","status","message","non_field_errors","Error","TokenInterceptor","request","localStorage","getItem","appConfing","Interceptor","_errInterceptor","_tokenInterceptor","initInterceptor","App","_interceptor","_notificationSystem","_notificationStyle","NotificationItem","DefaultStyle","addNotification","level","current","initInterceptors","prevProps","prevState","snapshot","notification","notify","basename","renderRouter","initialState","action","setItem","facebook_name","createStore","combineReducers","applyMiddleware","createLogger","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc5b7432.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const baseUrlConfig = {\n    account: 'account/',\n    blog: 'blogs/',\n    countries: 'countries/',\n};\n\n// https://cors-anywhere.herokuapp.com - workaround for CORS as proxy server\nconst baseUrlConfigProd = {\n    account: 'https://cors-anywhere.herokuapp.com/https://account-mt.herokuapp.com/api/v2',\n    blog: 'https://cors-anywhere.herokuapp.com/https://portfolio-blog-mt.herokuapp.com/api/v3',\n    countries: 'https://cors-anywhere.herokuapp.com/https://restcountries.eu/rest/v2/all?fields=name',\n};\n\nconst getBaseUrlConfig = (name: string) => (process.env.NODE_ENV === 'production' ? baseUrlConfigProd[name] : baseUrlConfig[name]);\nconst detailRoute = (routeName: string) => (id: number | null = null) => (id ? `${routeName}${id}` : `${routeName}:id`);\n\nexport const config = {\n    tokenKey: 'token_fsf0324fsd',\n    endpoints: {\n        auth: {\n            login: getBaseUrlConfig('account') + 'api_token_auth/',\n            me: getBaseUrlConfig('account') + 'users/me/',\n            exists_fb: getBaseUrlConfig('account') + 'users/exist_fb_account/',\n            register: getBaseUrlConfig('account') + 'users/',\n            users: getBaseUrlConfig('account') + 'users/'\n        },\n        blog: {\n            authors: getBaseUrlConfig('blog') + 'authors/',\n            countries: getBaseUrlConfig('blog') + 'countries/',\n            base: getBaseUrlConfig('blog'),\n        },\n        countries: {\n            base: getBaseUrlConfig('countries'),\n        }\n    },\n    routes: {\n        root: '/',\n        blog: {\n            dashboard: '/blog',\n            authors: '/blog/authors',\n            sites: '/blog/sites',\n            addNew: '/blog/add',\n            profile: '/blog/profile',\n            detail: detailRoute('/blog/'),\n        }\n    }\n}","export function setOpenLoginDialog(open: boolean) {\n  return {type: 'OPEN_LOGIN', value: open};\n}","export function setToken(value: string) {\n  return {type: 'SET_TOKEN', value};\n}\n\nexport function resetToken() {\n  return {type: 'SET_TOKEN', value: ''};\n}","export const notifyInfo = (msg: string) => {\n  return {\n      type: 'info',\n      msg: msg\n  };\n}\n\nexport const notifySuccess = (msg: string) =>  {\n  return {\n      type: 'success',\n      msg: msg\n  };\n}\n\nexport const notifyWarning = (msg: string) => {\n  return {\n      type: 'warning',\n      msg: msg\n  };\n}\n\nexport const notifyError = (msg: string) => {\n  return {\n      type: 'error',\n      msg: msg\n  };\n}","import { User } from \"../shared/interfaces/user\";\n\nexport function setUserData(user: User) {\n  return {type: 'SET_USER_DATA', data: user};\n}\n","export interface Blog {\n    id: number;\n    user_id: number;\n    title: string;\n    country: string | null;\n    content: string;\n    cooperators: string | null;\n    views: number;\n    photo_names: string | null;\n    add_date?: string;\n    update_date?: string;\n}\n\nexport enum ElementType {\n    PARAGRAPH,\n    IMAGE,\n}\n\nexport interface Element {\n    value: string | File;\n    type: ElementType;\n}\n\n","import React, { RefObject, ReactNode } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport './Sidebar.scss';\nimport HomeIcon from '@material-ui/icons/Menu';\n\nimport { config } from 'config';\nimport { setOpenLoginDialog } from 'actions/login-dialog';\nimport { User } from 'shared/interfaces/user';\nimport { resetToken } from 'actions/token';\nimport { notifySuccess } from 'actions/notify';\nimport { setUserData } from 'actions/user';\n\n\ninterface ReduxState {\n  user?: User;\n  token?: string;\n}\n\ninterface ReduxDispatch {\n  setOpenLoginDialog: (open: boolean) => void;\n  resetToken: () => void;\n  setUserData: (data: User) => void;\n  notifySuccess: (msg: string) => void;\n}\n\ninterface Props extends ReduxState, ReduxDispatch {\n  children: ReactNode;\n}\n\ninterface ComponentState {\n  showSidebar: boolean;\n  showNavbar: boolean;\n}\n\nclass BlogSidebarComponent extends React.Component <Props, ComponentState>  {\n  _ref: RefObject<HTMLDivElement> = React.createRef();\n  state = {\n    showSidebar: true,\n    showNavbar: false,\n  }\n\n  componentDidMount() {\n    if (this.isAppropriateWidth()) {\n      this.setState({showNavbar: true});\n      this.setState({showSidebar: false});\n    }\n  }\n\n  isAppropriateWidth() {\n    return window.innerWidth < 1000\n  }\n\n  toggleSidebar() {\n    this.setState({showSidebar: !this.state.showSidebar});\n  }\n\n  handleToggleSidebarIfSmallScreen() {\n    if (this.isAppropriateWidth()) this.toggleSidebar();\n  }\n\n  handleLogin() {\n    this.handleToggleSidebarIfSmallScreen();\n    if (this.props.token) {\n      this.props.resetToken();\n      this.props.setUserData({});\n      this.props.notifySuccess('Logout confirmed');\n    } else {\n      this.props.setOpenLoginDialog(true);\n    }\n  };\n\n  renderLoginButton() {\n    return this.props.token ? 'Logout' : 'Login';\n  };\n\n  renderSidebar() {\n    return (\n      <div className={`blog__sidebar ${this.state.showSidebar ? 'blog__sidebar--show' : 'blog__sidebar--hide'}`} ref={this._ref}>\n        <div className=\"blog__top\">\n          <Link to=\"/\" className=\"blog__name\">Blog</Link>\n          <div className=\"blog__navs\">\n            <Link to={config.routes.blog.dashboard} onClick={() => this.handleToggleSidebarIfSmallScreen()} className=\"\">Dashboard</Link>\n            <Link to={config.routes.blog.authors} onClick={() => this.handleToggleSidebarIfSmallScreen()} className=\"\">Authors</Link>\n            <Link to={config.routes.blog.sites} onClick={() => this.handleToggleSidebarIfSmallScreen()} className=\"\">Sites</Link>\n            <Link to={config.routes.blog.addNew} onClick={() => this.handleToggleSidebarIfSmallScreen()} className=\"\">Add blog</Link>\n          </div>\n        </div>\n        <div className=\"blog__bottom\">\n          {this.props.token && <Link to={config.routes.blog.profile} onClick={() => this.handleToggleSidebarIfSmallScreen()} className=\"blog__profile\">{this.props.user?.username}</Link>}\n          <div className=\"blog__login\" onClick={() => this.handleLogin()}>\n            {this.renderLoginButton()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  renderNavbar() {\n    return (\n      <div className=\"blog__navbar\">\n        <HomeIcon className=\"blog__navbar-icon\" fontSize=\"large\" onClick={() => this.toggleSidebar()}/>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"blog\">\n        {this.state.showSidebar && this.renderSidebar()}\n        <div className=\"blog__main\">\n          {this.state.showNavbar && this.renderNavbar()}\n          {this.props.children}\n        </div>\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = (state: ReduxState) => {\n  return {\n    user: state.user,\n    token: state.token,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setOpenLoginDialog: (open: boolean) => dispatch(setOpenLoginDialog(open)),\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg)),\n    resetToken: () => dispatch(resetToken()),\n    setUserData: (data: User) => dispatch(setUserData(data)),\n  };\n};\n\nexport const BlogSidebar = connect(mapStateToProps, mapDispatchToProps)(BlogSidebarComponent);","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { notifyError } from 'actions/notify';\nimport { User } from 'shared/interfaces/user';\n\n\ninterface State {\n  user: User;\n}\n\ninterface Props {\n  children: any;\n  user: User;\n  app: string;\n  notifyError: (msg: string) => void;\n}\n\nconst Guard = ({ component: Component, user, app, notifyError, ...rest }) => {\n  const redirectWrongLogin = () => {\n    notifyError('Please sign in to have full access!');\n    return <Redirect to={{\n      pathname: `/${app}`,\n    }} />\n  };\n\n  return <Route {...rest} render={(props) => (\n    user?.username\n    ? <Component {...props} />\n    : redirectWrongLogin()\n  )} />\n}\n\n\n\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    notifyError: (msg: string) => dispatch(notifyError(msg)),\n  };\n};\n\nconst mapStateToProps = (state: State) => {\n  return {\n    user: state.user,\n  };\n}\n\nexport const AuthGuard = connect(mapStateToProps, mapDispatchToProps)(Guard);","import React from 'react';\n\nimport './button.scss';\n\n\ninterface Props {\n  text?: string;\n  type?: \"button\" | \"submit\" | \"reset\";\n  onClick?: (event: any) => void;\n}\n\nconst ButtonWidget = (props: Props) => {\n  return (\n    <button\n      className=\"widget-button\"\n      type={props.type || 'button'}\n      onClick={props.onClick}\n    >\n      {props.text}\n    </button>\n  )\n}\n\nexport default ButtonWidget;","import React, { CSSProperties, useState } from 'react';\n\nimport './selectFile.scss';\nimport BackupIcon from '@material-ui/icons/Backup';\n\n\ninterface Props {\n  onChange?: (file: File) => void;\n  name?: string;\n  orderNumber?: number;\n}\n\nconst SelectFileWidget = (props: Props) => {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n\n  const onFileChange = (e: any) => {\n    const file = e.target.files[0];\n    setSelectedFile(file)\n    props.onChange && props.onChange(file);\n  };\n\n  const renderImage = selectedFile ? <img className=\"widget-select-file__img\" src={URL.createObjectURL(selectedFile)} /> : <></ >;\n  const classResize = selectedFile ? 'widget-select-file--resize' : '';\n  const uploadIcon = <BackupIcon fontSize=\"large\" style={{verticalAlign: 'text-top', marginRight: '1rem'}}/>;\n\n  return (\n    <div className={`widget-select-file ${classResize}`}>\n      {renderImage}\n      <label\n        htmlFor={`widget-select-file-id-${props.orderNumber}`}\n        className=\"widget-select-file__label\"\n      >\n        {uploadIcon}\n        {selectedFile?.name || 'Select file...'}\n      </label>\n      <input\n        id={`widget-select-file-id-${props.orderNumber}`}\n        className=\"widget-select-file__input\"\n        type=\"file\"\n        name={props.name}\n        accept=\"image/*\"\n        onChange={(e) => onFileChange(e)}\n        />\n    </div>\n  )\n}\n\nexport default SelectFileWidget;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport './Account.scss';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { ExpansionPanel, ExpansionPanelSummary, ExpansionPanelDetails } from '@material-ui/core';\n\nimport { Blog } from 'shared/interfaces/blog';\nimport { User } from 'shared/interfaces/user';\nimport ChangePassword from './changePassword/ChangePassword';\nimport EditProfile from './editProfile/EditProfile';\nimport Admin from './admin/Admin';\n\n\ninterface ComponentState {\n  mostSeenBlogs: Blog[];\n}\n\ninterface ReduxState {\n  user: User;\n\n}\n\ninterface Props extends ReduxState {\n\n}\n\nenum PanelCondition {\n  isSuperuser=1,\n}\n\ninterface PanelConfig {\n  [name: string]: {component: React.ComponentClass | JSX.Element; condition?: PanelCondition}\n}\n\nconst panels: PanelConfig = {\n  'Edit profile': {\n    component: <EditProfile />,\n  },\n  'Change password': {\n    component: <ChangePassword />,\n  },\n  'Admin': {\n    component: <Admin />,\n    condition: PanelCondition.isSuperuser,\n  },\n};\n\nconst AccountComponent = (props: Props) => {\n\n  const manageCondition = (cond: undefined | PanelCondition) => {\n    switch (cond) {\n      case PanelCondition.isSuperuser:\n        return props.user.is_superuser;\n      default:\n        return true;\n    }\n  }\n\n  return (\n    <div className=\"blog-account\">\n      {Object.keys(panels).map((key: string, index: number) => {\n        return manageCondition(panels[key].condition) ? <ExpansionPanel>\n                <ExpansionPanelSummary\n                  key={index}\n                  expandIcon={<ExpandMoreIcon />}\n                  aria-controls=\"panel-content\"\n                >\n                  {key}\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                  {panels[key].component}\n                </ExpansionPanelDetails>\n              </ExpansionPanel> : <></>\n      })}\n    </div>\n  );\n};\n\n\nconst mapStateToProps = (state: ReduxState) => {\n  return {\n    user: state.user,\n  };\n};\n\nconst Account = connect(mapStateToProps)(AccountComponent);\nexport default Account;\n","import { default as originAxios } from 'axios';\n\nconst axios = originAxios.create({\n  baseURL: process.env.PUBLIC_URL,\n});\n\nexport default axios;","import axios from '../../configAxios';\n\n\ninterface Params {\n  [name: string]: string | number | boolean;\n}\n\n\nclass HttpService {\n  get(url: string, params: Params = {}): Promise<any> {\n    return axios.get(url, {params: params}).then(response => response.data);\n  }\n\n  post(url: string, data: {}, config: {} = {}): Promise<any> {\n    return axios.post(url, data, config).then(response => response.data);\n  }\n\n  delete(url: string): Promise<any> {\n    return axios.delete(url).then(response => response.data);\n  }\n\n  put(url: string, data: {}): Promise<any> {\n    return axios.put(url, data).then(response => response.data);\n  }\n}\n\nexport default HttpService;","import { Element, ElementType, Blog } from 'shared/interfaces/blog';\nimport { config } from 'config';\nimport HttpService from './HttpService';\n\n\nclass BlogService {\n  _httpService: HttpService = new HttpService();\n  seperator: string = '/{}/';\n  separatorHelper: string = '//{()}\\\\';\n\n  formatContent(elements: Element[]) {\n    return elements.map((elem: Element) => (elem.type === 0 ? elem.value : this.seperator)).join('');\n  }\n\n  unformatContent(contentStr: string, filenamesStr: string | null) {\n    const content: Element[] = [];\n    const filenames = (filenamesStr && filenamesStr.split(',')) || [];\n    filenames.forEach(filename => {\n      contentStr = contentStr.replace(this.seperator, this.separatorHelper);\n      const tmpContent = contentStr.split(this.separatorHelper);\n      contentStr = tmpContent[1];\n      if (tmpContent[0]) content.push({value: tmpContent[0], type: ElementType.PARAGRAPH});\n      content.push({value: filename, type: ElementType.IMAGE});\n    });\n    if (contentStr) content.push({value: contentStr, type: ElementType.PARAGRAPH});\n    return content;\n  }\n\n  removeBlog(id: number) {\n    const url = `${config.endpoints.blog.base}${id}/`;\n    return this._httpService.delete(url).then(response => response);\n  }\n\n  getBlog(id: number) {\n    const url = `${config.endpoints.blog.base}${id}/`;\n    return this._httpService.get(url).then((response: Blog) => response);\n  }\n\n  putBlog(id: number, data: {}) {\n    const url = `${config.endpoints.blog.base}${id}/`;\n    return this._httpService.put(url, data).then((response: Blog) => response);\n  }\n\n  activateBlog(id: number) {\n    const url = `${config.endpoints.blog.base}${id}/`;\n    const data = {is_active: true};\n    return this._httpService.put(url, data).then((response: Blog) => response);\n  }\n\n  getActivatedBlogs(params: {} = {}) {\n    const url = config.endpoints.blog.base;\n    const newParams = {...params, is_active: true};\n    return this._httpService.get(url, newParams).then((response: Blog[]) => response);\n  }\n\n  getBlogs(params: {} = {}) {\n    const url = config.endpoints.blog.base;\n    return this._httpService.get(url, params).then((response: Blog[]) => response);\n  }\n\n  postBlog(rawData: {elements: Element[], countries: string[], title: string}) {\n    const data = new FormData();\n    const images = rawData.elements.filter(el => el.type === 1).map(el => el.value);\n    images.forEach(el => {\n      console.log(el)\n      data.append('file', el)\n    })\n    const formattedContent = this.formatContent(rawData.elements);\n    data.set('content', formattedContent);\n    data.set('country', rawData.countries.join(';'));\n    data.set('title', rawData.title);\n    console.log(data)\n    const url = config.endpoints.blog.base;\n    return this._httpService.post(url, data, {headers: {'Content-Type': 'multipart/form-data'}}).then((response: Blog) => response);\n  }\n}\n\nexport default BlogService;","import React from 'react';\n\nimport './select.scss';\n\nimport HttpService from '../../../services/HttpService';\nimport { Entity } from 'shared/interfaces/select';\n\n\ninterface State {\n  selected: number | string;\n  data: Entity[];\n}\n\ninterface Props {\n  onChange?: (value: number | string) => void;\n  data?: Entity[];\n  endpoint?: string;\n  placeholder?: string;\n  changeValue?: boolean;\n}\n\nclass SelectWidget extends React.Component<Props, State> {\n  private _httpService: HttpService = new HttpService();\n  state = {\n    selected: -1,\n    data: [],\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (props.data !== state.data && !props.endpoint) {\n      return {\n        data: props.data,\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    const url = this.props.endpoint;\n    if (url) this.getData(url);\n  }\n\n\n  getData(url: string | null) {\n    if (url) {\n      this._httpService.get(url).then(response => {\n        this.setState({\n          data: response || [],\n        })\n      }).catch(err => {});\n    }\n  }\n\n  handleSelectChange(event: any) {\n    const value: number | string = Number(event.target.value) || event.target.value;\n    if (this.props.onChange) this.props.onChange(value);\n    this.setState({\n      selected: value,\n    });\n  }\n\n  render() {\n    return (\n      <select\n        className=\"widget-select\"\n        value={this.props.changeValue ? this.state.selected : -1}\n        onChange={(e) => this.handleSelectChange(e)}\n      >\n        <option\n          value={-1}\n          disabled>{this.props.placeholder || \"Pick\"}\n        </option>\n        {this.state.data.map((entity: Entity, index: number) => <option key={entity.id || index} value={entity.id || entity.name}>{entity.name}</option>)}\n      </select>\n    )\n  }\n}\n\nexport default SelectWidget;","import React, { useState } from 'react';\n\nimport './selectMult.scss';\n\nimport { Entity } from 'shared/interfaces/select';\nimport SelectWidget from '../select/select';\n\n\ninterface Props {\n  onChange?: (value: string[]) => void;\n  data?: Entity[];\n  endpoint?: string;\n  placeholder?: string;\n}\n\nconst SelectMultipleWidget = (props: Props) => {\n  const [selected, setSelected] = useState<string[]>([])\n\n  const handleChange = (value: string) => {\n    const newSelected = [value, ...selected];\n    setSelected(newSelected);\n    if (props.onChange) props.onChange(newSelected);\n  }\n\n  const rm = (id) => {\n    setSelected(selected.filter((el, i) => i != id));\n  }\n\n  const renderElements = () => {\n    return <div className=\"widget-select-multiple__selected-elements\">\n            {selected.map((s, index) => {\n              return <span key={index} className=\"widget-select-multiple__selected-element\">\n                {s}\n                <span onClick={() => rm(index)} className=\"widget-select-multiple__selected-element-rm\">x</span>\n              </span>\n            })}\n          </div>\n  }\n\n  return (\n    <div className=\"widget-select-multiple\">\n      <SelectWidget\n        placeholder={props.placeholder}\n        data={props.data}\n        endpoint={props.endpoint}\n        onChange={(value: string | number) => handleChange(value as string)}\n      />\n      {renderElements()}\n    </div>\n  )\n}\n\nexport default SelectMultipleWidget;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport './Add.scss';\nimport ButtonWidget from 'shared/components/widgets/button/button';\nimport SelectFileWidget from 'shared/components/widgets/selectFile/selectFile';\n\nimport { notifySuccess } from 'actions/notify';\nimport { Blog, Element, ElementType } from 'shared/interfaces/blog';\nimport { config } from 'config';\nimport BlogService from 'shared/services/blog.service';\nimport SelectMultipleWidget from 'shared/components/widgets/selectMult/selectMult';\n\n\ninterface ComponentState {\n  elements: Element[];\n  title: string;\n  countries: string[];\n}\n\ninterface Props {\n  notifySuccess: (msg: string) => void;\n  history: any;\n}\n\nclass AddForm extends React.Component <Props, ComponentState> {\n  _service: BlogService = new BlogService();\n\n  state = {\n    elements: [{value: '', type: ElementType.PARAGRAPH}],\n    title: '',\n    countries: [],\n  };\n\n  clearState() {\n    this.setState({\n      elements: [{value: '', type: ElementType.PARAGRAPH}],\n      title: '',\n      countries: []\n    });\n  }\n\n  addNewParagraph(e: any, id: number) {\n    this.addElement(ElementType.PARAGRAPH, id);\n  }\n\n  addNewImage(e: any, id: number) {\n    this.addElement(ElementType.IMAGE, id);\n  }\n\n  addElement(type: ElementType, id: number) {\n    const array: Element[] = [...this.state.elements];\n    array.splice(id+1, 0, {value: '', type: type});\n    this.setState({\n      elements: [...array]\n    });\n  }\n\n  removeElement(e: any, id: number) {\n    const array: Element[] = [...this.state.elements];\n    array.splice(id, 1);\n    this.setState({\n      elements: [...array]\n    });\n  }\n\n  onParagraphValueChange(e: any, i: number) {\n    const array: Element[] = [...this.state.elements];\n    array[i].value = e.target.value;\n    this.setState({\n      elements: array\n    });\n  }\n\n  onFileChange(file: File, i: number) {\n    const array: Element[] = [...this.state.elements];\n    array[i].value = file;\n    this.setState({\n      elements: array\n    });\n  }\n\n  onSubmit(event: any) {\n    event.preventDefault();\n    const data = {\n      elements: this.state.elements,\n      countries: this.state.countries,\n      title: this.state.title,\n    };\n    this._service.postBlog(data).then((response: Blog) => {\n      this.clearState();\n      this.props.notifySuccess('Blog successfully created. Please wait for administration verification!');\n      this.props.history.push('/blog/' + response.id);\n    }).catch(err => {});\n  }\n\n  renderSelectImage(file: File, i: number) {\n    return (\n      <SelectFileWidget name=\"blog-image\" onChange={(file) => this.onFileChange(file, i)} orderNumber={i}/>\n    )\n  }\n\n  renderParagraph(value: string, id: number) {\n    return (\n      <div className=\"blog-add__paragraph\" key={id}>\n        <textarea\n          className=\"blog-add__control blog-add__textarea\"\n          placeholder=\"Type...\"\n          rows={5}\n          value={value}\n          onChange={(e) => this.onParagraphValueChange(e, id)}\n        />\n      </div>\n    )\n  }\n\n  renderPartForm(elem: Element, id: number) {\n    return (\n      <div className=\"blog-add__part-form\" key={id}>\n        {elem.type === ElementType.PARAGRAPH ? this.renderParagraph(elem.value as string, id) : this.renderSelectImage(elem.value as File, id)}\n        {this.renderToolAction(id)}\n      </div>\n    )\n  }\n\n  renderToolAction(id: number) {\n    let removeButton = <div></ div>;\n    const isDeletable = id === 0 && this.state.elements.length > 0;\n    if (!isDeletable) {\n      removeButton = <ButtonWidget onClick={(e) => this.removeElement(e, id)} text=\"Remove\"/>\n    }\n\n    return (\n      <div className=\"blog-add__tool-action\">\n        <ButtonWidget onClick={(e) => this.addNewParagraph(e, id)} text=\"Add here paragrapgh\"/>\n        <ButtonWidget onClick={(e) => this.addNewImage(e, id)} text=\"Add here image\"/>\n        {removeButton}\n      </div>\n    )\n  }\n\n  renderSettings() {\n    return (\n      <div className=\"blog-add__settings\">\n        <input placeholder=\"Title\" onChange={(e) => this.setState({title: e.target.value})} value={this.state.title} />\n        <SelectMultipleWidget placeholder=\"Region\" onChange={(value) => this.setState({countries: value})} endpoint={config.endpoints.countries.base}/>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"blog-add\">\n        <form className=\"blog-add__form\" onSubmit={(e) => this.onSubmit(e)}>\n          { this.renderSettings() }\n          { this.state.elements.map((elem: Element, id: number) => this.renderPartForm(elem, id)) }\n          <ButtonWidget type=\"submit\" text={'Submit'}/>\n        </form>\n      </div>\n    );\n  }\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg))\n  };\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(AddForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './SelectCardList.scss';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport ViewHeadlineIcon from '@material-ui/icons/ViewHeadline';\nimport ButtonWidget from 'shared/components/widgets/button/button';\nimport SelectWidget from 'shared/components/widgets/select/select';\n\nimport { config  } from 'config';\nimport { Blog } from 'shared/interfaces/blog';\nimport HttpService from 'shared/services/HttpService'\nimport BlogService from 'shared/services/blog.service';\n\n\ninterface Props {\n    endpoint: string;\n    filters: {[filterName: string]: string | null};\n    selector?: string;\n    initData?: any[];\n};\n\ninterface Subject {\n    id: number;\n    name?: string;\n}\n\ninterface Entity {\n  subject: any;\n  blogs: Blog[];\n}\n\ninterface State {\n  loading: boolean;\n  subjects: any[];\n  selectedEntity: Entity[];\n}\n\n\nclass SelectCardList extends React.Component<Props, State> {\n  private _httpService: HttpService = new HttpService();\n  private _service: BlogService = new BlogService();\n  state = {\n    subjects: [],\n    selectedEntity: [],\n    loading: false,\n  };\n\n  componentDidMount() {\n    this.setState({\n      loading: true,\n    });\n    const initData = this.props.initData;\n    if (initData) {\n      const subjects: Subject[] = this.mapSubjects(initData, this.props.selector)\n      subjects.forEach((subject: Subject) => this.getBlogs(subject));\n    }\n    this.getSubjects()\n  }\n\n  getSubjects() {\n    const url = this.props.endpoint;\n    const selector = this.props.selector;\n    this._httpService.get(url).then(response => {\n      const subjects: Subject[] = this.mapSubjects(response, selector)\n      this.setState({\n        subjects: subjects,\n        loading: false,\n      });\n    }).catch(error => {\n    })\n  }\n\n  mapSubjects(subjects: any, selector: string | undefined) {\n    return subjects.map(\n      (subject: Subject | string, index: number) => ({id: (subject as Subject).id || index, name: selector ? subject[selector] : subject})\n    );\n  }\n\n  getBlogs(subject: Subject) {\n    const subjectBlogsExists = this.state.selectedEntity.map((entity: Entity) => entity.subject.id).includes(subject.id);\n    if (!subjectBlogsExists) {\n      const filters = {};\n      for (const key in this.props.filters) {\n        filters[key] = this.props.filters[key] === 'id' ? subject.id : subject.name;\n      }\n      this._service.getActivatedBlogs(filters).then((response: Blog[]) => {\n        const entity: Entity = {subject, blogs: response};\n        const selectedEntity: Entity[] = [...this.state.selectedEntity, entity];\n        this.setState({\n          selectedEntity,\n        });\n      }).catch(error => {\n      })\n    }\n    this.setState({\n      loading: false,\n    });\n  }\n\n  handleSubjectSelectChange(id: number) {\n    this.setState({\n      loading: true,\n    });\n    const subject: Subject = this.state.subjects.find((subject: Subject) => id === subject.id) || {id};\n    this.getBlogs(subject);\n  }\n\n  handleRemoveSubjectBlogs(index: number) {\n    const selectedEntity: Entity[] = [...this.state.selectedEntity];\n    selectedEntity.splice(index, 1);\n    this.setState({\n      selectedEntity,\n    });\n  }\n\n  renderBlogsCard(keyId: number, subject: Subject, blogs: Blog[]) {\n    return (\n      <Card className=\"blog-cards__card\" key={keyId}>\n        <CardContent>\n          <header className=\"blog-cards__blogs-header\">{subject.name || subject.id}</header>\n          {blogs.map(blog => {\n            return (\n              <Link to={config.routes.blog.detail(blog.id)} className=\"blog-cards__blogs-list-element\" key={blog.id}>\n                <ViewHeadlineIcon fontSize=\"inherit\" />\n                <div className=\"blog-cards__blogs-list-element-text\">{blog.title}</div>\n              </Link>\n            )\n          })}\n        </CardContent>\n        <CardActions>\n          <ButtonWidget onClick={() => this.handleRemoveSubjectBlogs(keyId)} text={'Unpin'}/>\n        </CardActions>\n      </Card>\n    )\n  }\n\n  renderMainCard() {\n    return (\n      <Card className=\"blog-cards__card--header\">\n        <CardContent>\n          {this.state.loading && <LinearProgress />}\n          <SelectWidget data={this.state.subjects} onChange={(id: number | string) => this.handleSubjectSelectChange(id as number)}/>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"blog-cards\">\n        <div className=\"blog-cards__header\">\n          {this.renderMainCard()}\n        </div>\n        <div className=\"blog-cards__list\">\n          {this.state.selectedEntity.map((entity: Entity, index: number) => this.renderBlogsCard(index, entity.subject, entity.blogs))}\n        </div>\n\n      </div>\n    );\n  }\n};\n\nexport default SelectCardList;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { config  } from 'config';\nimport SelectCardList from 'components/Blog/common/SelectCardList';\n\n\ninterface State {\n\n}\n\ninterface Props {\n  location: any;\n};\n\nclass Sites extends React.Component<Props, State> {\n  endpoint: string = config.endpoints.blog.countries;\n  filters = {country: null};\n  state = {\n    sites: []\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      sites: this.props.location.state?.countries || null,\n    }\n  }\n\n  render() {\n    return (\n      <SelectCardList endpoint={this.endpoint} filters={this.filters}  initData={this.state.sites}></SelectCardList>\n    );\n  }\n};\n\nexport default connect()(Sites);\n","import { config } from 'config';\nimport HttpService from './HttpService';\n\n\nclass UserService {\n  _httpService: HttpService = new HttpService();\n\n  getUsers(users: string | number) {\n    const url = `${config.endpoints.auth.users}`;\n    return this._httpService.get(url, {ids: users}).then(response => response);\n  }\n\n  putUser(data: {}) {\n    const url = `${config.endpoints.auth.users}`;\n    return this._httpService.put(url, data).then(response => response);\n  }\n}\n\nexport default UserService;","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  withRouter\n} from 'react-router-dom';\n\nimport './Entry.scss';\nimport ButtonWidget from 'shared/components/widgets/button/button';\n\nimport { config  } from 'config';\nimport { Blog, Element, ElementType } from 'shared/interfaces/blog';\nimport { Link } from 'react-router-dom';\nimport { User } from 'shared/interfaces/user';\nimport { notifySuccess } from 'actions/notify';\nimport BlogService from 'shared/services/blog.service';\nimport UserService from 'shared/services/user.service';\n\n\ninterface Props {\n  match: any;\n  history: any;\n  notifySuccess: (msg: string) => void;\n};\n\ninterface State {\n  blog: Blog;\n  elements: Element[];\n  authors: {main: User, support: User[]}\n}\n\n\nclass Entry extends React.Component<Props, State> {\n  _service: BlogService = new BlogService();\n  _userService: UserService = new UserService();\n  state = {\n    blog: {id: 0, content: '', user_id: 0, title: \"\", cooperators: null, photo_names: null, views: 0, country: \"Poland\", add_date: '', update_date: ''},\n    elements: [],\n    authors: {main: {username: ''}, support: []},\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    this.getBlog(id);\n  }\n\n  getBlog(id: number) {\n    this._service.getBlog(id).then((response: Blog) => {\n      if (response) {\n        this.setState({\n          blog: response,\n          elements: this._service.unformatContent(response.content, response.photo_names),\n        });\n        console.log(this.state)\n        this.getAuthorsNames();\n      }\n    });\n  }\n\n  getAuthorsNames() {\n    this._userService.getUsers(this.state.blog.user_id).then((response: User[]) => {\n      this.setState({\n        authors: {...this.state.authors, main: response[0]}\n      });\n    });\n\n    const cooperators = this.state.blog.cooperators;\n    if (cooperators) {\n      this._userService.getUsers(cooperators).then((response: User[]) => {\n        this.setState({\n          authors: {...this.state.authors, support: response}\n        });\n      });\n    }\n  }\n\n  removeBlog(id: number) {\n    this._service.removeBlog(id).then(response => {\n      this.props.notifySuccess('Blog successfully removed...');\n      this.props.history.push('/blog');\n    }).catch(err => err);\n  }\n\n  render() {\n    return (\n      <div className=\"blog-detail\">\n        <div className=\"blog-detail__description\">\n          <div className=\"blog-detail__left\">\n            <div className=\"blog-detail__title\">{this.state.blog.title}</div>\n            <div className=\"blog-detail__region\">\n              Region:\t{'\\u00A0'}\n                {this.state.blog.country.split(';').map(country => {\n                  return <span className=\"blog-detail__region-element\">\n                          <Link to={{\n                            pathname: config.routes.blog.sites,\n                            state: {\n                              countries: [country]\n                            }}}\n                          >\n                            {country}\n                          </Link>\n                        </span>\n                })}\n            </div>\n            <div className=\"blog-detail__author\">\n              Author:\t{'\\u00A0'}\n              <Link to={{\n                pathname: config.routes.blog.authors,\n                state: {\n                  authors: [this.state.authors.main]\n                }}}\n              >\n                {this.state.authors.main ? this.state.authors.main.username : 'Anonym'}\n              </Link>\n            </div>\n            <div className=\"blog-detail__support\">\n              {this.state.authors.support.length ? 'Support:' : ''}\n              <Link to={{\n                pathname: config.routes.blog.authors,\n                state: {\n                  authors: this.state.authors.support\n                }}}\n              >\n                {this.state.authors.support.map((user: User, index: number) => <span className=\"blog-detail__support-author\" key={index}>{user.username}</span>)}\n              </Link>\n            </div>\n          </div>\n          <div className=\"blog-detail__right\">\n            <div className=\"blog-detail__add-date\">Created: {this.state.blog.add_date}</div>\n            <div className=\"blog-detail__update-date\">Last modified: {this.state.blog.update_date}</div>\n            <div className=\"blog-detail__seen\">Views: {this.state.blog.views}</div>\n            <div className=\"blog-detail__actions\">\n                <ButtonWidget text=\"Remove\" onClick={(e) => this.removeBlog(this.state.blog.id)}/>\n            </div>\n          </div>\n        </div>\n        <div className=\"blog-detail__content\">\n          {this.state.elements.map((elem: Element, id: number) => {\n            return elem.type === ElementType.PARAGRAPH ? <div className=\"blog-detail__p\" key={id}>{elem.value}</div> : <img key={id} src={elem.value as string} alt={elem.value as string} className=\"blog-detail__image\" />\n          })}\n        </div>\n      </div>\n    );\n  }\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg))\n  };\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(Entry));\n","import React from 'react';\n\nimport './Authors.scss';\n\nimport { config  } from 'config';\nimport { User } from 'shared/interfaces/user';\nimport SelectCardList from 'components/Blog/common/SelectCardList';\n\n\ninterface Props {\n  location: any;\n};\n\ninterface State {\n  authors: User[];\n}\n\n\nclass Authors extends React.Component<Props, State> {\n  endpoint: string = config.endpoints.blog.authors;\n  filters = {user_id: 'id'};\n  selector: string = 'username';\n  state = {\n    authors: []\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      authors: this.props.location.state?.authors || null,\n    }\n  }\n\n  render() {\n    return (\n      <SelectCardList endpoint={this.endpoint} selector={this.selector} filters={this.filters} initData={this.state.authors}></SelectCardList>\n    );\n  }\n};\n\nexport default Authors;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Dashboard.scss';\nimport { Card, CardContent, CardActions } from '@material-ui/core';\nimport ViewHeadlineIcon from '@material-ui/icons/ViewHeadline';\n\nimport { config } from 'config';\nimport { Blog } from 'shared/interfaces/blog';\nimport { User } from 'shared/interfaces/user';\nimport HttpService from 'shared/services/HttpService';\nimport BlogService from 'shared/services/blog.service';\nimport ButtonWidget from 'shared/components/widgets/button/button';\n\n\ninterface ComponentState {\n  latestBlogs: Blog[];\n  mostSeenBlogs: Blog[];\n  topSeenAuthors: User[];\n  mostSeenCountries: string[];\n}\n\ninterface Props {\n\n}\n\nclass Dashboard extends React.Component<Props, ComponentState> {\n  private _httpService: HttpService = new HttpService();\n  private _service: BlogService = new BlogService();\n  state = {\n    latestBlogs: [],\n    mostSeenBlogs: [],\n    topSeenAuthors: [],\n    mostSeenCountries: [],\n  };\n\n  componentDidMount() {\n    this.getMostSeenBlogs();\n    this.getLatestBlogs();\n    this.getTopSeenAuthors();\n    this.getMostSeenCountries();\n  }\n\n  getMostSeenBlogs() {\n    const params = {limit: 5, ordering: '-views'};\n    this._service.getActivatedBlogs(params).then((response: Blog[]) => {\n      this.setState({\n        mostSeenBlogs: response,\n      })\n    }).catch(err => {});\n  }\n\n  getLatestBlogs() {\n    const params = {limit: 5};\n    this._service.getActivatedBlogs(params).then((response: Blog[]) => {\n      this.setState({\n        latestBlogs: response,\n      })\n    }).catch(err => {});\n  }\n\n  getTopSeenAuthors() {\n    const url = config.endpoints.blog.authors;\n    const params = {limit: 5, ordering: '-views'};\n    this._httpService.get(url, params).then((response: User[]) => {\n      this.setState({\n        topSeenAuthors: response,\n      })\n    }).catch(err => {});\n  }\n\n  getMostSeenCountries() {\n    const url = config.endpoints.blog.countries;\n    const params = {limit: 5, ordering: '-views'};\n    this._httpService.get(url, params).then((response: string[]) => {\n      this.setState({\n        mostSeenCountries: response,\n      })\n    }).catch(err => {});\n  }\n\n  render() {\n    return (\n      <div className=\"blog-dashboard\">44444444\n        <Card className=\"blog-dashboard__card\">\n          <CardContent>\n            <header className=\"blog-dashboard__header\">Most seen blogs</header>\n            {this.state.mostSeenBlogs.map((blog: Blog) => {\n              return (\n                <Link to={config.routes.blog.detail(blog.id)} className=\"blog-dashboard__list-elem-link\" key={blog.id}>\n                  <ViewHeadlineIcon fontSize=\"inherit\" />\n                  <div className=\"blog-dashboard__list-element-text\">{blog.title}</div>\n                </Link>\n              )\n            })}\n          </CardContent>\n        </Card>\n\n        <Card className=\"blog-dashboard__card\">\n          <CardContent>\n            <header className=\"blog-dashboard__header\">Latest blogs</header>\n            {this.state.latestBlogs.map((blog: Blog) => {\n              return (\n                <Link to={config.routes.blog.detail(blog.id)} className=\"blog-dashboard__list-elem-link\" key={blog.id}>\n                  <ViewHeadlineIcon fontSize=\"inherit\" />\n                  <div className=\"blog-dashboard__list-element-text\">{blog.title}</div>\n                </Link>\n              )\n            })}\n          </CardContent>\n        </Card>\n\n\n        <Card className=\"blog-dashboard__card\">\n          <CardContent>\n            <header className=\"blog-dashboard__header\">Top 5 seen authors</header>\n            {this.state.topSeenAuthors.map((user: User, index: number) => {\n              return (\n                <div key={index}>{user.username}</div>\n              )\n            })}\n          </CardContent>\n          <CardActions>\n            <Link to={{\n                pathname: config.routes.blog.authors,\n                state: {\n                  authors: this.state.topSeenAuthors\n                }}}\n              >\n                <ButtonWidget text=\"Visit\" />\n              </Link>\n          </CardActions>\n        </Card>\n\n        <Card className=\"blog-dashboard__card\">\n          <CardContent>\n            <header className=\"blog-dashboard__header\">Most seen countries</header>\n            {this.state.mostSeenCountries.map((country: string, index: number) => {\n              return (\n                <div key={index}>{country}</div>\n              )\n            })}\n          </CardContent>\n          <CardActions>\n            <Link to={{\n                pathname: config.routes.blog.sites,\n                state: {\n                  countries: this.state.mostSeenCountries\n                }}}\n              >\n                <ButtonWidget text=\"Visit\" />\n              </Link>\n          </CardActions>\n        </Card>\n      </div>\n    );\n  }\n};\n\nexport default Dashboard;","import React from 'react';\n\nimport './input.scss';\n\n\ninterface Props {\n  onChange?: (val: string) => void;\n  refe?: any;\n  name?: string;\n  placeholder?: string;\n  type?: string;\n}\n\nconst InputWidget = (props: Props) => {\n  const onChange = (event: any) => {\n    if (props.onChange) props.onChange(event.target.value);\n  }\n\n  return (\n    <input\n      className=\"widget-input\"\n      type={props.type}\n      placeholder={props.placeholder}\n      name={props.name}\n      ref={props.refe}\n      onChange={e => onChange(e)}\n    />\n  )\n}\n\nexport default InputWidget;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { useForm } from 'react-hook-form';\n\nimport InputWidget from 'shared/components/widgets/input/input';\nimport ButtonWidget from 'shared/components/widgets/button/button';\n\nimport UserService from 'shared/services/user.service';\nimport { notifySuccess } from 'actions/notify';\n\n\ninterface ReduxDispatch {\n  notifySuccess: (msg: string) => void;\n}\n\ninterface Props extends ReduxDispatch {\n\n}\n\nconst ChangePasswordComponent = (props: Props) => {\n  const _service: UserService = new UserService();\n  const {register, setValue, handleSubmit, errors} = useForm<Account>();\n\n  const onSubmit = handleSubmit((data: Account) => {\n    // _service.putUser(data).then(response => {\n    //   props.notifySuccess('User data updated');\n    // }).catch(err => {});\n  });\n\n  return (\n    <form className=\"blog-change-password\" onSubmit={onSubmit}>\n      <div className=\"form-field\">\n        <InputWidget placeholder=\"Old password\" name=\"oldPassword\" refe={register({required: false})}/>\n      </div>\n      <div className=\"form-field\">\n        <InputWidget placeholder=\"New password\" name=\"newPassword\" refe={register({required: false})}/>\n      </div>\n      <div className=\"form-field\">\n        <InputWidget placeholder=\"Confirm new password\" name=\"newConfirmationPassword\" refe={register({required: false})}/>\n      </div>\n      <ButtonWidget type={\"submit\"} text={\"Update\"}/>\n    </form>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg)),\n  };\n};\n\nconst ChangePassword = connect(null, mapDispatchToProps)(ChangePasswordComponent);\n\nexport default ChangePassword;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { useForm } from 'react-hook-form';\n\nimport InputWidget from 'shared/components/widgets/input/input';\nimport ButtonWidget from 'shared/components/widgets/button/button';\n\nimport { User } from 'shared/interfaces/user';\nimport { notifySuccess } from 'actions/notify';\nimport { setUserData } from 'actions/user';\nimport UserService from 'shared/services/user.service';\n\ninterface ReduxDispatch {\n  notifySuccess: (msg: string) => void;\n  setUserData: (data: User) => void;\n}\n\ninterface Props extends ReduxDispatch {\n\n}\n\ninterface Account {\n  username?: string;\n  email?: string;\n}\n\nconst EditProfileComponent = (props: Props) => {\n  const _service: UserService = new UserService();\n  const {register, setValue, handleSubmit, errors} = useForm<Account>();\n\n  const onSubmit = handleSubmit((data: Account) => {\n    // _service.putUser(data).then(response => {\n    //   props.notifySuccess('User data updated');\n    //   props.setUserData(response);\n    // }).catch(err => {});\n  });\n\n  return (\n    <form className=\"blog-edit-profile\" onSubmit={onSubmit}>\n      <div className=\"form-field\">\n        <InputWidget placeholder=\"Username\" name=\"username\" refe={register({required: false})}/>\n      </div>\n      <div className=\"form-field\">\n        <InputWidget placeholder=\"Email\" name=\"email\" refe={register({required: false})}/>\n      </div>\n      <ButtonWidget type={\"submit\"} text={\"Update\"}/>\n    </form>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg)),\n    setUserData: (data: User) => dispatch(setUserData(data)),\n  };\n};\n\nconst EditProfile = connect(null, mapDispatchToProps)(EditProfileComponent);\n\nexport default EditProfile;","import React, { useState, useEffect } from 'react';\n\nimport { Blog } from 'shared/interfaces/blog';\nimport BlogService from 'shared/services/blog.service';\n\n\ninterface ComponentState {\n  blogs: Blog[];\n}\n\ninterface Props {\n\n}\n\nconst _service: BlogService = new BlogService();\n\nconst Admin = (props: Props) => {\n  const [blogs, setBlogs] = useState<Blog[]>([]);\n\n  useEffect(() => {\n    getMostSeenBlogs();\n  }, []);\n\n  const getMostSeenBlogs = () => {\n    _service.getBlogs().then((response: Blog[]) => {\n      setBlogs(response);\n    }).catch(err => {});\n  }\n\n  const activateBlog = (id: number) => {\n    _service.activateBlog(id).then(res => {\n      getMostSeenBlogs();\n    }).catch(err => {});\n  }\n\n  return (\n    <div className=\"blog-admin\">\n      {blogs.map((blog: Blog, index: number) => {\n        return <div key={index}>\n          {blog.title}\n          <span onClick={() => activateBlog(blog.id)}>Activate</span>\n        </div>\n      })}\n    </div>\n  );\n};\n\nexport default Admin;","export interface Profile {\n    location?: string;\n    facebook_id?: string;\n    facebook_name?: string;\n}\n\nexport interface User {\n    id? :number;\n    username?: string;\n    first_name?: string;\n    last_name?: string;\n    profile?: Profile;\n    is_superuser?: boolean;\n}\n\nexport enum RegisterFormType {\n    NONE,\n    FRAGMENTARY,\n    FULL,\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport './Blog.scss';\n\nimport { config } from 'config';\nimport { BlogSidebar } from './Sidebar';\nimport { AuthGuard } from 'shared/guards/AuthGuard'\nimport AddForm  from './add/Add';\nimport Sites from './cards/Sites';\nimport Entry from './detail/Entry';\nimport Authors from './cards/Authors';\nimport Dashboard from './Dashboard';\nimport Account from './account/Account';\n\n\ninterface Props {\n\n}\n\nconst BlogComponent = (props: Props) => {\n  const renderContent = () => {\n    return (\n      <Switch>\n          <Route path={config.routes.blog.dashboard} exact component={Dashboard} />\n          <Route path={config.routes.blog.authors} component={Authors} />\n          {/* <Route path={config.routes.blog.addNew} component={AddForm} /> */}\n          <AuthGuard path={config.routes.blog.addNew} component={AddForm} app=\"blog\" />\n          <Route path={config.routes.blog.sites} component={Sites} />\n          <Route path={config.routes.blog.profile} component={Account} />\n          <Route path={config.routes.blog.detail()} component={Entry} />\n      </Switch>\n    )\n  }\n\n  return (\n    <BlogSidebar>\n      {renderContent()}\n    </BlogSidebar>\n  )\n}\n\nexport const Blog = connect(null)(BlogComponent);","import React from 'react';\n\nimport './Forum.scss';\n\n\nexport class Forum extends React.Component {\n  render() {\n    return (\n        <div className=\"forum\"></div>\n    )\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Dashboard.scss';\n\n\nexport class Dashboard extends React.Component {\n\n  render() {\n    return (\n      <div className=\"dashboard\">\n          <div className=\"part part--1\">\n            <Link to=\"/blog\" className=\"part__link link\">\n              <div className=\"part__quarter part__quarter--1\">\n                <div className=\"part__name part__name--1\">\n                  blog\n                </div>\n              </div>\n            </Link>\n          </div>\n          <div className=\"part part--2\">\n            <Link to=\"/photos\" className=\"part__link link\">\n              <div className=\"part__quarter part__quarter--2\">\n                <div className=\"part__name part__name--2\">\n                  photos\n                </div>\n              </div>\n            </Link>\n          </div>\n          <div className=\"part part--3\">\n            <Link to=\"/forum\" className=\"part__link link\">\n              <div className=\"part__quarter part__quarter--3\">\n                <div className=\"part__name part__name--3\">\n                  forum\n                </div>\n              </div>\n            </Link>\n          </div>\n          <div className=\"part part--4\">\n            <div className=\"part__bg-video\">\n              {/* <ReactPlayer url='containers/movies.mp4' className=\"part__bg-video--content\" lopp playing muted controls/> */}\n              <video className=\"part__bg-video--content\" autoPlay muted loop>\n                <source src=\"movie-dashboard.mp4\" type=\"video/mp4\"></source>\n                <source src=\"movie-dashboard-2.webm\" type=\"video/webm\"></source>\n                Sorry, your browser doesn't support embedded videos.\n              </video>\n              <div className=\"part__bg-video--gradient\"></div>\n            </div>\n            <Link to=\"/movies\" className=\"part__link link\">\n              <div className=\"part__quarter part__quarter--4\">\n                <div className=\"part__name part__name--4\">\n                  movies\n                </div>\n              </div>\n            </Link>\n          </div>\n      </div>\n    );\n  }\n};","import React from 'react';\n\nimport './Photos.scss';\n\n\nexport const Photos = (props: any) => {\n  return (\n    <div className=\"photos\">\n    </div>\n  );\n};","import React from 'react';\n\nimport './Movies.scss';\n\n\nexport const Movies = (props: any) => {\n  return (\n    <div className=\"movies\"></div>\n  );\n};","import React from 'react';\n\n\nexport const NotFound = (props: any) => {\n  return (\n    <div>\n      404\n    </div>\n  );\n};","import React from 'react';\nimport { connect } from 'react-redux';\nimport FacebookLogin from 'react-facebook-login';\n\nimport { config } from 'config';\nimport { setToken } from 'actions/token';\nimport { RegisterFormType } from 'shared/interfaces/user';\nimport { notifySuccess } from 'actions/notify';\nimport HttpService from 'shared/services/HttpService';\n\n\ninterface FacebookDataPicture {\n  height: number;\n  is_silhouette: boolean;\n  url: string;\n  width: number;\n}\n\ninterface FacebookPicture {\n  data: FacebookDataPicture;\n}\n\ninterface FacebookResponse {\n  status: string;\n  name: string;\n  picture: FacebookPicture;\n  id: string;\n  accessToken: string;\n  userID: string;\n  expiresIn: 3945;\n  signedRequest: string;\n  graphDomain: 'facebook';\n  data_access_expiration_time: number;\n}\n\ninterface Props {\n  setToken: (token: string) => void;\n  handleClose: (logged: boolean) => void;\n  notifySuccess: (msg: string) => void;\n  setRegistration: (type: number) => void;\n  fbCssClass: string;\n}\n\nexport const FacebookComponent = (props: Props) => {\n  const _httpService: HttpService = new HttpService();\n\n  const responseFacebook = (responseFb: FacebookResponse) => {\n    const url = config.endpoints.auth.exists_fb;\n    _httpService.get(`${url}?fb_id=${responseFb.userID}`).then(response => {\n      const exists = response.exists;\n      if (exists) {\n        props.setToken(responseFb.accessToken);\n        props.notifySuccess('Now you are logged in!');\n        props.handleClose(true);\n      } else {\n        props.setRegistration(RegisterFormType.FRAGMENTARY);\n      }\n    }).catch(err => {});\n  }\n\n  const componentClicked = () => {\n  }\n\n  const facebookData = (<FacebookLogin\n    cssClass={props.fbCssClass}\n    appId=\"3136029376407498\"\n    autoLoad={false}\n    fields=\"name,picture,email\"\n    onClick={componentClicked}\n    callback={responseFacebook} />\n  );\n\n  return (\n      <div>{facebookData}</ div>\n  )\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setToken: (token: string) => dispatch(setToken(token)),\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg)),\n  };\n};\n\nexport const Facebook = connect(null, mapDispatchToProps)(FacebookComponent);\n","import React from 'react';\n\nimport './error.scss'\n\n\ninterface Props {\n  customStyle?: {};\n  text: string;\n}\n\nconst ErrorWidget = (props: Props) => {\n  return (\n    <div\n      className=\"widget-error\"\n      style={{...props.customStyle}}\n    >\n      {props.text}\n    </div>\n  )\n}\n\nexport default ErrorWidget;","import React, {useState} from 'react';\nimport { connect } from 'react-redux';\nimport { Facebook } from './Facebook';\n\nimport './LoginForm.scss';\nimport InputWidget from 'shared/components/widgets/input/input';\nimport ErrorWidget from 'shared/components/widgets/error/error';\nimport ButtonWidget from 'shared/components/widgets/button/button';\n\nimport { notifySuccess } from 'actions/notify';\nimport { setToken } from 'actions/token';\nimport { RegisterFormType } from 'shared/interfaces/user';\nimport { config  } from \"config\";\nimport HttpService from 'shared/services/HttpService'\n\n\ninterface Props {\n  setToken: (token: string) => void;\n  handleClose: (logged: boolean) => void;\n  notifySuccess: (msg: string) => void;\n  setRegistration: (type: number) => void;\n}\n\ninterface State {\n}\n\ninterface Credentials {\n  username: string;\n  password: string;\n}\n\nexport const LoginFormComponent = (props: Props) => {\n  const _httpService: HttpService = new HttpService();\n  const [credentials, setCredentials] = useState<Credentials>({username: '', password: ''});\n  const [validationError, setValidationError] = useState<{valid: boolean, msg: string}>({valid: true, msg: \"Username and password must be filled\"});\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n    if (credentials.username && credentials.password) {\n      const url = config.endpoints.auth.login;\n      _httpService.post(url, credentials).then(response => {\n        props.setToken(response.token);\n        props.handleClose(true);\n        props.notifySuccess('Now you are logged in!');\n      }).catch(err => {});\n    } else {\n      setNonValid();\n    }\n  }\n\n  const setNonValid = () => {\n    setValidationError({\n      ...validationError,\n      valid: false,\n    });\n    setTimeout(() => setValidationError({\n      ...validationError,\n      valid: true,\n    }), 4000)\n  }\n\n  const onUsernameChange = (value: string) => {\n    setCredentials({\n      ...credentials,\n      username: value\n    });\n  }\n\n  const onPasswordChange = (value: string) => {\n    setCredentials({\n      ...credentials,\n      password: value\n    });\n  }\n\n  return (\n    <div className=\"login\">\n      <Facebook fbCssClass=\"login__fb-btn\" handleClose={props.handleClose} setRegistration={props.setRegistration}/>\n      <form className=\"login__form\" onSubmit={(e) => handleSubmit(e)}>\n        <div className=\"form-field\">\n          <InputWidget placeholder=\"Username\" onChange={(value: string) => onUsernameChange(value)}/>\n        </div>\n        <div className=\"form-field\">\n          <InputWidget type=\"password\" placeholder=\"Password\" onChange={(value: string) => onPasswordChange(value)}/>\n        </div>\n        <ErrorWidget text={validationError.valid ? \"\" : validationError.msg}/>\n        <div className=\"login__actions\">\n          <ButtonWidget type={\"button\"} onClick={(e) => props.setRegistration(RegisterFormType.FULL)} text={\"Sign up\"}/>\n          <ButtonWidget type={\"submit\"} text={\"Login\"}/>\n        </div>\n      </form>\n    </div>\n    )\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setToken: (token: string) => dispatch(setToken(token)),\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg)),\n  };\n};\n\nexport const LoginForm = connect(null, mapDispatchToProps)(LoginFormComponent);","import React, { useState } from 'react';\nimport { useForm } from \"react-hook-form\";\nimport { connect } from 'react-redux';\n\nimport './RegisterForm.scss';\nimport InputWidget from 'shared/components/widgets/input/input';\nimport ErrorWidget from 'shared/components/widgets/error/error';\nimport ButtonWidget from 'shared/components/widgets/button/button';\n\nimport { notifySuccess } from 'actions/notify';\nimport { User, Profile, RegisterFormType } from 'shared/interfaces/user';\nimport { config  } from \"config\";\nimport HttpService from 'shared/services/HttpService'\n\n\ninterface Props {\n  user: User;\n  registerType: number;\n  notifySuccess: (msg: string) => void;\n  setRegistration: (register: number) => void;\n}\n\ninterface State {\n  user: User;\n}\n\ninterface Account {\n  username?: string;\n  password?: string;\n  passwordConfirmation?: string;\n  email?: string;\n  profile?: Profile;\n}\n\nexport const RegisterFormComponent = (props: Props) => {\n  const _httpService: HttpService = new HttpService();\n  const [validationError, setValidationError] = useState<{valid: boolean, msg: string}>({valid: true, msg: \"Passwords must be the same\"});\n  const {register, setValue, handleSubmit, errors} = useForm<Account>();\n\n  const onSubmit = handleSubmit((data: Account) => {\n    if (data.password !== data.passwordConfirmation) {\n      setValidationError({\n        ...validationError,\n        valid: false\n      });\n      setTimeout(() => setValidationError({\n        ...validationError,\n        valid: true,\n      }), 4000)\n    } else {\n      delete data.passwordConfirmation;\n      data = {...data, profile: {facebook_id: props.user.profile?.facebook_id}};\n      const url = config.endpoints.auth.register\n      _httpService.post(url, data).then(reponse => {\n        props.setRegistration(RegisterFormType.NONE);\n        props.notifySuccess('Register successfully! Login again to authenticate yourself')\n      }).catch(err => {\n\n      })\n    }\n  });\n\n  const renderAdditionalFields = () => {\n    return (\n      <div className=\"register-form__additional-fields\">\n        <div className=\"form-field\">\n          <InputWidget type=\"password\" placeholder=\"Password\" name=\"password\" refe={register({required: true})}/>\n        </div>\n        <ErrorWidget text={errors.password ? \"Password is required!\" : \"\"}/>\n        <div className=\"form-field\">\n          <InputWidget type=\"password\" placeholder=\"Password Confirmation\" name=\"passwordConfirmation\" refe={register({required: true})}/>\n        </div>\n        <ErrorWidget text={errors.passwordConfirmation ? \"Password confirmation is required!\" : \"\"}/>\n        <ErrorWidget text={validationError.valid ? \"\" : validationError.msg}/>\n        <div className=\"form-field\">\n          <InputWidget type=\"email\" placeholder=\"Email\" name=\"email\" refe={register({required: true})}/>\n        </div>\n        <ErrorWidget text={errors.email ? \"Email is required!\" : \"\"}/>\n      </div>\n    )\n  }\n\n  const renderBasicFields = () => {\n    return (\n      <div className=\"register-form__basic-fields\">\n        <div className=\"form-field\">\n          <InputWidget placeholder=\"Username\" name=\"username\" refe={register({required: true})}/>\n        </div>\n        <ErrorWidget text={errors.username ? \"Username is required!\" : \"\"}/>\n      </div>\n    )\n  }\n\n  const renderActions = () => {\n    return (\n      <div className=\"register-form__actions\">\n        <ButtonWidget type={\"button\"} onClick={(e) => props.setRegistration(RegisterFormType.NONE)} text={\"Back\"}/>\n        <ButtonWidget type={\"submit\"} text={\"Register\"}/>\n      </div>\n    )\n  }\n\n  return (\n    <form className=\"register-form\" onSubmit={onSubmit}>\n      {renderBasicFields()}\n      {props.registerType === RegisterFormType.FULL ? renderAdditionalFields() : <></>}\n      {renderActions()}\n    </form>\n  );\n};\n\nconst mapStateToProps = (state: State) => {\n  return {\n    user: state.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg)),\n  };\n};\n\nexport const RegisterForm = connect(mapStateToProps, mapDispatchToProps)(RegisterFormComponent);","import React from 'react';\nimport { CloseOutlined } from '@material-ui/icons';\n\nimport './Dialog.scss';\n\n\ninterface Props {\n    onClose: () => void;\n    open: boolean;\n    children?: any;\n    title?: string;\n}\n\nexport const Dialog = (props: Props) => {\n\n  const onBackgroundClick = (event) => {\n    if(event.target === event.currentTarget) {\n        props.onClose();\n    }\n  }\n\n  return (\n    <div className={`dialog ${props.open ? 'dialog--show' : ''}`} onClick={(e) => onBackgroundClick(e)}>\n      <div className=\"dialog__box\">\n        <CloseOutlined className=\"dialog__exit-icon\" fontSize=\"large\" onClick={props.onClose} />\n        <h3 className=\"dialog__title\">{props.title}</h3>\n        {props.children}\n      </div>\n    </div>\n  );\n};","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport './LoginDialog.scss';\n\nimport { setOpenLoginDialog } from 'actions/login-dialog';\nimport { LoginForm } from './LoginForm';\nimport { RegisterForm } from './RegisterForm';\nimport { User, RegisterFormType } from 'shared/interfaces/user';\nimport { Dialog } from 'shared/components/Dialog';\nimport { config  } from \"config\";\nimport { setUserData } from 'actions/user';\nimport HttpService from 'shared/services/HttpService';\n\n\ninterface Props {\n  setOpenLoginDialog: (open: boolean) => void;\n  setUserData: (data: User) => void;\n  isOpenLoginDialog: boolean;\n  user: User;\n  token: string;\n}\n\ninterface State {\n  isOpenLoginDialog: boolean;\n  user: User;\n  token: string;\n}\n\nconst LoginComponent = (props: Props) => {\n  const _httpService: HttpService = new HttpService();\n  const [isRegistration, setRegistration] = useState<number>(RegisterFormType.NONE);\n\n  const getUserData = () => {\n    _httpService.get(config.endpoints.auth.me).then((response: User) => {\n      props.setUserData(response);\n    })\n  }\n\n  const handleClose = (logged: boolean = false) => {\n    setRegistration(RegisterFormType.NONE);\n    props.setOpenLoginDialog(false);\n    if (logged) getUserData();\n  };\n\n  const renderRegisterForm = () => {\n    return (\n      <RegisterForm setRegistration={setRegistration} registerType={isRegistration}></RegisterForm>\n    )\n  }\n\n  const renderLoginForm = () => {\n    return (\n      <LoginForm handleClose={handleClose} setRegistration={setRegistration}></LoginForm>\n    )\n  }\n\n  return (\n    <Dialog onClose={() => handleClose()} open={props.isOpenLoginDialog} title={isRegistration ? 'Sign up' : 'Login'}>\n      {isRegistration ? renderRegisterForm() : renderLoginForm()}\n    </Dialog>\n  );\n};\n\nconst mapStateToProps = (state: State) => {\n  return {\n    isOpenLoginDialog: state.isOpenLoginDialog,\n    user: state.user,\n    token: state.token,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setOpenLoginDialog: (open: boolean) => dispatch(setOpenLoginDialog(open)),\n    setUserData: (data: User) => dispatch(setUserData(data)),\n  };\n};\n\nexport const LoginDialog = connect(mapStateToProps, mapDispatchToProps)(LoginComponent);\n","import { AxiosResponse, AxiosError } from 'axios';\nimport axios from 'configAxios';\n\n\nclass ErrorResponseInterceptor {\n  staticMessages = {\n    504: 'Problem with server connection',\n    0: 'Unrecognized error',\n  }\n\n  initInterceptor(notifyError: (msg: string) => void) {\n    axios.interceptors.response.use((config: AxiosResponse) => {\n      return config;\n    }, (error: AxiosError) => {\n      const status = error.response?.status || 0;\n      let msg = this.staticMessages[status];\n      const data = error.response?.data;\n      msg = msg || data.message || (data.non_field_errors && data.non_field_errors[0]) || this.staticMessages['0'];\n      console.log('[ERROR]', msg);\n      if (msg.length) {\n        notifyError(msg);\n        throw new Error(msg);\n      }\n    })\n  }\n}\n\nexport default ErrorResponseInterceptor;","import { AxiosRequestConfig } from 'axios';\nimport axios from 'configAxios';\nimport { config as appConfing } from 'config';\n\n\nclass TokenInterceptor {\n  initInterceptor() {\n    axios.interceptors.request.use((config: AxiosRequestConfig) => {\n      const token = localStorage.getItem(appConfing.tokenKey);\n      let headers = {...config.headers};\n      if (token) {\n        headers = {\n          ...headers,\n          'Authorization': `Token ${token}`,\n        }\n        config = {\n          ...config,\n          headers\n        }\n      }\n      return config;\n    });\n  }\n}\n\nexport default TokenInterceptor;","import ErrorResponseInterceptor from \"./response_error.interceptor\";\nimport TokenInterceptor from \"./token.interceptor\";\n\nclass Interceptor {\n  private _errInterceptor: ErrorResponseInterceptor = new ErrorResponseInterceptor();\n  private _tokenInterceptor: TokenInterceptor = new TokenInterceptor();\n\n  initInterceptors(notifyError: (msg: string) => void) {\n    this._errInterceptor.initInterceptor(notifyError);\n    this._tokenInterceptor.initInterceptor();\n  }\n}\n\nexport default Interceptor;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport NotificationSystem from 'react-notification-system';\n\nimport './App.scss';\n\nimport { Notification } from 'shared/interfaces/notification.interface';\nimport { Blog } from './Blog/Blog';\nimport { Forum } from './Forum/Forum';\nimport { Dashboard } from './Dashboard/Dashboard';\nimport { Photos } from './Photos/Photos';\nimport { Movies } from './Movies/Movies';\nimport { NotFound } from 'shared/components/NotFound';\nimport { LoginDialog } from './Login/LoginDialog';\nimport { notifyError } from 'actions/notify';\nimport { setToken } from 'actions/token';\nimport { setUserData } from 'actions/user';\nimport { User } from 'shared/interfaces/user';\nimport { config } from 'config';\nimport HttpService from 'shared/services/HttpService';\nimport Interceptor from 'shared/interceptors/interceptor';\n\n\ninterface State {\n  notify: Notification;\n}\n\ninterface Props {\n  notify: Notification;\n  notifyError: (msg: string) => void;\n  setToken: (token: string) => void;\n  setUserData: (data: User) => void;\n}\n\nclass App extends React.Component <Props, State> {\n  private _httpService: HttpService = new HttpService();\n  private _interceptor: Interceptor = new Interceptor();\n  private _notificationSystem = React.createRef();\n  private _notificationStyle = {\n    NotificationItem: {\n      DefaultStyle: {\n        fontSize: '2rem',\n      },\n    }\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this._interceptor.initInterceptors(props.notifyError);\n    const token = localStorage.getItem(config.tokenKey);\n    props.setToken(token || '');\n    if (token) this.getUserData();\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State, snapshot: any) {\n    const notification = this.props.notify;\n    if (prevProps.notify !== notification) {\n      this.addNotification(notification.msg, notification.type);\n    }\n  }\n\n  getUserData() {\n    this._httpService.get(config.endpoints.auth.me).then((response: User) => {\n      this.props.setUserData(response);\n    }).catch(err => {});\n  }\n\n  addNotification = (msg: string, level: string) => {\n    const notification: any = this._notificationSystem.current;\n    notification.addNotification({\n      message: msg,\n      level: level\n    });\n  };\n\n  renderRouter() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path=\"/\" exact component={Dashboard} />\n          <Route path=\"/blog\" component={Blog} />\n          <Route path=\"/photos\" component={Photos} />\n          <Route path=\"/forum\" component={Forum} />\n          <Route path=\"/movies\" component={Movies} />\n          <Route path=\"*\" component={NotFound} />\n        </Switch>\n      </Router>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        {this.renderRouter()}\n        <NotificationSystem ref={this._notificationSystem} style={this._notificationStyle}/>\n        <LoginDialog />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State) => {\n  return {\n      notify: state.notify,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    notifyError: (msg: string) => dispatch(notifyError(msg)),\n    setToken: (token: string) => dispatch(setToken(token)),\n    setUserData: (data: User) => dispatch(setUserData(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Notification } from 'shared/interfaces/notification.interface';\n\n\nconst initialState = {\n  type: 'INFO',\n  msg: 'INFO'\n}\n\nconst notify = (state: Notification = initialState, action: Notification) => {\n  if (['info', 'success', 'warning', 'error'].includes(action.type)) {\n    state = {\n      ...state,\n      type: action.type,\n      msg: action.msg\n    }\n  }\n  return state;\n};\n\nexport default notify;\n","import { config } from \"config\";\n\n\nconst initialState: string = '';\n\ninterface Action {\n  type: string;\n  value: string;\n};\n\nconst token = (state: string = initialState, action: Action) => {\n  switch (action.type) {\n    case 'SET_TOKEN' :\n      localStorage.setItem(config.tokenKey, action.value ? action.value : '');\n      state = action.value;\n    break;\n  }\n  return state;\n};\n\nexport default token;","import { User, Profile } from \"shared/interfaces/user\";\n\n\nconst profile: Profile = {\n  location: '',\n  facebook_id: '',\n  facebook_name: '',\n}\n\nconst initialState: User = {\n    username: '',\n    profile: profile,\n};\n\ninterface Action {\n  type: string;\n  data: User;\n};\n\n\nconst user = (state: User = initialState, action: Action) => {\n  switch (action.type) {\n    case 'SET_USER_DATA' :\n      state = {...action.data};\n    break;\n  }\n  return state;\n};\n\nexport default user;","\nconst initialState = false;\n\ninterface Action {\n  type: string,\n  value: boolean\n};\n\nconst isOpenLoginDialog = (state: boolean = initialState, action: Action) => {\n  switch (action.type) {\n    case 'OPEN_LOGIN' :\n      state = action.value;\n    break;\n  }\n  return state;\n};\n\nexport default isOpenLoginDialog;","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\n\nimport notify from './reducers/notify';\nimport token from './reducers/token';\nimport user from './reducers/user';\nimport isOpenLoginDialog from './reducers/login-dialog';\n\nexport default createStore(\n  combineReducers({\n      notify,\n      isOpenLoginDialog,\n      user,\n      token,\n  }), {}, applyMiddleware(createLogger())\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\nimport store from './store';\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}