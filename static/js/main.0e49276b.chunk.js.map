{"version":3,"sources":["serviceWorker.js","configAxios.tsx","config.tsx","actions/notify.tsx","components/Blog/add/Add.tsx","shared/services/HttpService.tsx","../../src/input/input.tsx","../../src/HttpService.tsx","../../src/select/select.tsx","../../src/error/error.tsx","../../src/button/button.tsx","components/Blog/common/SelectCardList.tsx","components/Blog/cards/Sites.tsx","components/Blog/detail/Entry.tsx","components/Blog/cards/Authors.tsx","components/Blog/Dashboard.tsx","actions/login-dialog.tsx","actions/token.tsx","actions/user.tsx","components/Blog/Sidebar.tsx","shared/interfaces/user.tsx","shared/guards/AuthGuard.tsx","components/Blog/Blog.tsx","components/Forum/Forum.tsx","components/Dashboard/Dashboard.tsx","components/Photos/Photos.tsx","components/Movies/Movies.tsx","shared/components/NotFound.tsx","components/Login/Facebook.tsx","components/Login/LoginForm.tsx","components/Login/RegisterForm.tsx","shared/components/Dialog.tsx","components/Login/LoginDialog.tsx","shared/interceptors/response_error.interceptor.tsx","shared/interceptors/token.interceptor.tsx","shared/interceptors/interceptor.tsx","components/App.tsx","reducers/notify.tsx","reducers/token.tsx","reducers/user.tsx","reducers/login-dialog.tsx","store.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","axios","originAxios","create","baseURL","process","console","log","get","then","res","routeName","config","endpoints","auth","login","me","exists_fb","register","blog","authors","countries","base","routes","root","dashboard","sites","addNew","detail","id","notifySuccess","msg","type","notifyError","AddForm","props","state","elements","value","e","this","addElement","array","splice","setState","v","className","key","toString","name","placeholder","rows","onChange","onValueChange","i","target","accept","onFileChange","elem","getParagraph","getImage","toolAction","removeButton","length","onClick","removeElement","addNewParagrapgh","addNewImage","event","preventDefault","onSubmit","setSettings","map","getPartForm","React","Component","connect","dispatch","HttpService","url","params","response","data","post","delete","put","InlineStyles","input","width","fontSize","InputWidget","render","style","ref","refe","filters","a","select","border","borderBottom","backgroundColor","borderRadiusTop","outline","fontFamily","paddingLeft","SelectWidget","_httpService","selected","getDerivedStateFromProps","componentDidMount","getData","handleSelectChange","Number","changeValue","disabled","entity","color","font_weight","ErrorWidget","button","SelectCardList","subjects","selectedEntity","loading","initData","mapSubjects","selector","forEach","subject","getBlogs","getSubjects","endpoint","catch","error","index","includes","blogs","find","keyId","Card","CardContent","to","title","CardActions","Button","size","handleRemoveSubjectBlogs","LinearProgress","handleSubjectSelectChange","renderMainCard","renderBlogsCard","Sites","country","Entry","content","user_id","cooperators","photo_names","views","getBlog","Authors","Dashboard","latestBlogs","mostSeenBlogs","topSeenAuthors","mostSeenCountries","getMostSeenBlogs","getLatestBlogs","getTopSeenAuthors","getMostSeenCountries","limit","ordering","err","pathname","user","username","setOpenLoginDialog","open","setToken","setUserData","RegisterFormType","BlogSidebar","token","resetToken","children","AuthGuard","component","app","rest","Blog","path","exact","Forum","autoPlay","muted","loop","src","Photos","Movies","NotFound","Facebook","facebookData","cssClass","fbCssClass","appId","autoLoad","fields","callback","responseFb","userID","exists","accessToken","handleClose","setRegistration","FRAGMENTARY","LoginForm","useState","password","credentials","setCredentials","valid","validationError","setValidationError","setNonValid","setTimeout","handleSubmit","onUsernameChange","onPasswordChange","text","FULL","RegisterForm","useForm","setValue","errors","passwordConfirmation","profile","facebook_id","reponse","NONE","required","registerType","email","Dialog","currentTarget","onClose","CloseOutlined","LoginDialog","isOpenLoginDialog","isRegistration","getUserData","logged","ErrorResponseInterceptor","staticMessages","504","0","interceptors","use","status","message","non_field_errors","Error","TokenInterceptor","request","localStorage","getItem","headers","Interceptor","_errInterceptor","_tokenInterceptor","initInterceptor","App","_interceptor","_notificationSystem","createRef","_notificationStyle","NotificationItem","DefaultStyle","addNotification","level","current","initInterceptors","prevProps","prevState","snapshot","notification","notify","basename","renderRouter","initialState","action","setItem","facebook_name","createStore","combineReducers","applyMiddleware","createLogger","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e49276b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { default as originAxios } from 'axios';\n\nconst axios = originAxios.create({\n  baseURL: process.env.PUBLIC_URL,\n});\n\nexport default axios;","import { default as axios } from './configAxios';\n\nconst detailRoute = (routeName: string) => (id: number | null = null) => (id ? `${routeName}${id}` : `${routeName}:id`)\n\nconsole.log(`${process.env.PUBLIC_URL ? '/' + process.env.PUBLIC_URL : ''}`);\nconsole.log(2222222222);\n\naxios.get('http://172.105.93.9/api/v2/users/').then(res => console.log(res));\n\nexport const config = {\n    endpoints: {\n        auth: {\n            login: '/account/api_token_auth/',\n            me: '/account/users/me/',\n            exists_fb: '/account/users/exist_fb_account/',\n            register: '/account/users/'\n        },\n        blog: {\n            authors: '/blogs/authors/',\n            countries: '/blogs/countries/',\n            base: '/blogs/',\n        }\n    },\n    routes: {\n        root: '/',\n        blog: {\n            dashboard: '/blog',\n            authors: '/blog/authors',\n            sites: '/blog/sites',\n            addNew: '/blog/add',\n            detail: detailRoute('/blog/'),\n        }\n    }\n}","export const notifyInfo = (msg: string) => {\n  return {\n      type: 'info',\n      msg: msg\n  };\n}\n\nexport const notifySuccess = (msg: string) =>  {\n  return {\n      type: 'success',\n      msg: msg\n  };\n}\n\nexport const notifyWarning = (msg: string) => {\n  return {\n      type: 'warning',\n      msg: msg\n  };\n}\n\nexport const notifyError = (msg: string) => {\n  return {\n      type: 'error',\n      msg: msg\n  };\n}","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport './Add.scss';\n\nimport { notifySuccess } from '../../../actions/notify';\n\n\ninterface Element {\n  value: string,\n  type: 'paragraph' | 'image'\n}\n\ninterface State {\n  elements: Element[];\n}\n\ninterface Props {\n  notifySuccess: any;\n}\n\nclass AddForm extends React.Component <Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      elements: [{value: '', type: 'paragraph'}]\n    }\n  }\n\n  addNewParagrapgh(e: any, id: number) {\n    this.addElement('paragraph', id);\n  }\n\n  addNewImage(e: any, id: number) {\n    this.addElement('image', id);\n  }\n\n  addElement(type: 'paragraph' | 'image', id: number) {\n    const array: Element[] = [...this.state.elements];\n    array.splice(id+1, 0, {value: '', type: type});\n    this.setState({\n      elements: [...array]\n    });\n  }\n\n  removeElement(e: any, id: number) {\n    const array: Element[] = [...this.state.elements];\n    array.splice(id, 1);\n    this.setState({\n      elements: [...array]\n    });\n  }\n\n  getParagraph(v: string, id: number) {\n    return (\n      <div className=\"form__paragraph\" key={id}>\n        <textarea\n          key={id}\n          id={id.toString()}\n          className=\"form__control form__textarea\"\n          name={'text-' + id.toString()}\n          placeholder=\"\"\n          rows={5}\n          value={v}\n          onChange={(e) => this.onValueChange(e, id)}\n        />\n      </div>\n    )\n  }\n\n  onValueChange(e: any, i: number) {\n    const array: Element[] = [...this.state.elements];\n    array[i].value = e.target.value;\n    this.setState({\n      elements: array\n    })\n  }\n\n  getImage() {\n    return (\n      <input type=\"file\" name=\"pic\" accept=\"image/*\" onChange={(e) => this.onFileChange(e)}/>\n    )\n  }\n\n  onFileChange(e: any) {\n    // console.log(e.target.value)\n  }\n\n  getPartForm(elem: Element, id: number) {\n    return (\n      <div className=\"form__part-form\" key={id}>\n        {elem.type === 'paragraph' ? this.getParagraph(elem.value, id) : this.getImage()}\n        {this.toolAction(id)}\n      </div>\n    )\n  }\n\n  toolAction(id: number) {\n    let removeButton = <div></ div>;\n    const isDeletable = id === 0 && this.state.elements.length > 0;\n    if (!isDeletable) {\n      removeButton = <button type=\"button\" className=\"form__remove-p\" onClick={(e) => this.removeElement(e, id)}>Remove</button>\n    }\n\n    return (\n      <div className=\"form__tool-action\">\n        <button type=\"button\" className=\"form__add-p\" onClick={(e) => this.addNewParagrapgh(e, id)}>Add here p</button>\n        <button type=\"button\" className=\"form__add-p\" onClick={(e) => this.addNewImage(e, id)}>Add here img</button>\n        {removeButton}\n      </div>\n    )\n  }\n\n  setSettings() {\n    return (\n      <div className=\"form__settings\">\n        <input placeholder=\"Title\" />\n        <input placeholder=\"Region\" />\n      </div>\n    )\n  }\n\n  onSubmit(event: any) {\n    event.preventDefault();\n    this.props.notifySuccess('asd');\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"form\" onSubmit={(e) => this.onSubmit(e)}>\n          { this.setSettings() }\n          { this.state.elements.map((elem, id) => this.getPartForm(elem, id)) }\n          <button type=\"submit\" className=\"form__submit\">Submit</button>\n        </form>\n      </div>\n    );\n  }\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(AddForm);\n","import axios from '../../configAxios';\n\n\ninterface Params {\n  [name: string]: string | number;\n}\n\n\nclass HttpService {\n  get(url: string, params: Params = {}): Promise<any> {\n    return axios.get(url, {params: params}).then(response => response.data);\n  }\n\n  post(url: string, data: {}): Promise<any> {\n    return axios.post(url, data).then(response => response.data);\n  }\n\n  delete(url: string, id: number): Promise<any> {\n    return axios.delete(url).then(response => response.data);\n  }\n\n  put(url: string, data: {}): Promise<any> {\n    return axios.put(url).then(response => response.data);\n  }\n}\n\nexport default HttpService;","import React from 'react';\n\n\nconst InlineStyles = {\n  input: {\n    width: '100%',\n    fontSize: '2.5rem',\n  }\n}\n\ninterface State {\n\n}\n\ninterface Props {\n  onChange?: (val: string) => void;\n  refe?: any;\n  name?: string;\n  placeholder?: string;\n  type?: string;\n}\n\nclass InputWidget extends React.Component<Props, State> {\n  onChange(event: any) {\n    if (this.props.onChange) this.props.onChange(event.target.value);\n  }\n\n  render() {\n    return (\n      <input\n        className=\"widget-input\"\n        style={InlineStyles.input}\n        type={this.props.type}\n        placeholder={this.props.placeholder}\n        name={this.props.name}\n        ref={this.props.refe}\n        onChange={e => this.onChange(e)}\n      />\n    )\n  }\n}\n\nexport default InputWidget;","import axios from 'axios';\n\n\ninterface Filters {\n  [name: string]: string | number;\n}\n\n\nclass HttpService {\n  get(url: string, filters: Filters = {}): Promise<any> {\n    return axios.get(url, {params: filters}).then(response => response.data);\n  }\n}\n\nexport default HttpService;","import React from 'react';\n\nimport HttpService from '../HttpService';\n\n\nconst InlineStyles = {\n  select: {\n    width: '100%',\n    fontSize: '2rem',\n    border: '0',\n    borderBottom: '1px black solid',\n    backgroundColor: 'transparent',\n    borderRadiusTop: '5px',\n    outline: 'none',\n    fontFamily: 'serif',\n    paddingLeft: '3px',\n    '&:hover': {\n      backgroundColor: 'black',\n    }\n  }\n};\n\ninterface State {\n  selected: number;\n  data: Entity[];\n}\n\ninterface Entity {\n  id: number;\n  name: string;\n}\n\ninterface Props {\n  onChange?: (id: number) => void;\n  data?: Entity[];\n  endpoint?: string;\n  placeholder?: string;\n  changeValue?: boolean;\n}\n\nclass SelectWidget extends React.Component<Props, State> {\n  private _httpService: HttpService = new HttpService();\n  state = {\n    selected: -1,\n    data: [],\n  }\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (props.data !== state.data && !props.endpoint) {\n      return {\n        data: props.data,\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    const url = this.props.endpoint;\n    if (url) this.getData(url);\n  }\n\n\n  getData(url: string | null) {\n    if (url) {\n      this._httpService.get(url).then(response => {\n        this.setState({\n          data: response || [],\n        })\n      });\n    }\n  }\n\n  handleSelectChange(event: any) {\n    const id: number = Number(event.target.value);\n    if (this.props.onChange) this.props.onChange(id);\n    this.setState({\n      selected: id,\n    });\n  }\n\n  render() {\n    return (\n      <select\n        className=\"widget-select\"\n        style={InlineStyles.select}\n        value={this.props.changeValue ? this.state.selected : -1}\n        onChange={(e) => this.handleSelectChange(e)}\n      >\n        <option value={-1} disabled>{this.props.placeholder || \"Pick\"}</option>\n        {this.state.data.map((entity: Entity) => <option key={entity.id} value={entity.id}>{entity.name}</option>)}\n      </select>\n    )\n  }\n}\n\nexport default SelectWidget;","import React from 'react';\n\n\nconst InlineStyles = {\n  error: {\n    color: 'red',\n    font_weight: 'bold' as string,\n    fontSize: '1.5rem',\n  }\n};\n\ninterface Props {\n  customStyle?: {};\n  text: string;\n}\n\nconst ErrorWidget = (props: Props) => {\n  return (\n      <div\n        className=\"widget-error\"\n        style={{...InlineStyles.error, ...props.customStyle}}\n      >\n        {props.text}\n      </div>\n  )\n}\n\nexport default ErrorWidget;","import React from 'react';\n\n\nconst InlineStyles = {\n  button: {\n    fontSize: '2rem',\n    // border: '0',\n    // borderBottom: '1px black solid',\n    backgroundColor: 'transparent',\n    borderRadiusTop: '5px',\n    // outline: 'none',\n    // fontFamily: 'serif',\n    // paddingLeft: '3px',\n  }\n};\n\ninterface State {\n\n}\n\ninterface Props {\n  text?: string;\n  type?: \"button\" | \"submit\" | \"reset\";\n  onClick?: (event: any) => void;\n}\n\nclass ButtonWidget extends React.Component<Props, State> {\n  render() {\n    return (\n      <button\n        style={InlineStyles.button}\n        type={this.props.type}\n        onClick={this.props.onClick}\n      >{this.props.text}</button>\n    )\n  }\n}\n\nexport default ButtonWidget;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './SelectCardList.scss';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport CheckIcon from '@material-ui/icons/Check';\nimport ViewHeadlineIcon from '@material-ui/icons/ViewHeadline';\n\nimport { config  } from '../../../config';\nimport HttpService from '../../../shared/services/HttpService'\nimport { Blog } from '../../../shared/interfaces/blog';\nimport { SelectWidget } from 'widgets';\n\n\ninterface Props {\n    endpoint: string;\n    filters: {[filterName: string]: string | null};\n    selector?: string;\n    initData?: any[];\n};\n\ninterface Subject {\n    id: number;\n    name?: string;\n}\n\ninterface Entity {\n  subject: any;\n  blogs: Blog[];\n}\n\ninterface State {\n  loading: boolean;\n  subjects: any[];\n  selectedEntity: Entity[];\n}\n\n\nclass SelectCardList extends React.Component<Props, State> {\n  private _httpService: HttpService = new HttpService();\n  state = {\n    subjects: [],\n    selectedEntity: [],\n    loading: false,\n  };\n\n  componentDidMount() {\n    this.setState({\n      loading: true,\n    });\n    const initData = this.props.initData;\n    if (initData) {\n      const subjects: Subject[] = this.mapSubjects(initData, this.props.selector)\n      subjects.forEach((subject: Subject) => this.getBlogs(subject));\n    }\n    this.getSubjects()\n  }\n\n  getSubjects() {\n    const url = this.props.endpoint;\n    const selector = this.props.selector;\n    this._httpService.get(url).then(response => {\n      const subjects: Subject[] = this.mapSubjects(response, selector)\n      this.setState({\n        subjects: subjects,\n        loading: false,\n      });\n    }).catch(error => {\n    })\n  }\n\n  mapSubjects(subjects: any, selector: string | undefined) {\n    return subjects.map(\n      (subject: Subject | string, index: number) => ({id: (subject as Subject).id || index, name: selector ? subject[selector] : subject})\n    );\n  }\n\n  getBlogs(subject: Subject) {\n    const subjectBlogsExists = this.state.selectedEntity.map((entity: Entity) => entity.subject.id).includes(subject.id);\n    if (!subjectBlogsExists) {\n      const url = config.endpoints.blog.base;\n      const filters = {};\n      for (const key in this.props.filters) {\n        filters[key] = this.props.filters[key] === 'id' ? subject.id : subject.name;\n      }\n      this._httpService.get(url, filters).then((response: Blog[]) => {\n        const entity: Entity = {subject, blogs: response};\n        const selectedEntity: Entity[] = [...this.state.selectedEntity, entity];\n        this.setState({\n          selectedEntity,\n        });\n        console.log(this.state)\n      }).catch(error => {\n      })\n    }\n    this.setState({\n      loading: false,\n    });\n  }\n\n  handleSubjectSelectChange(id: number) {\n    this.setState({\n      loading: true,\n    });\n    const subject: Subject = this.state.subjects.find((subject: Subject) => id === subject.id) || {id};\n    this.getBlogs(subject);\n  }\n\n  handleRemoveSubjectBlogs(index: number) {\n    const selectedEntity: Entity[] = [...this.state.selectedEntity];\n    selectedEntity.splice(index, 1);\n    this.setState({\n      selectedEntity,\n    });\n  }\n\n  renderBlogsCard(keyId: number, subject: Subject, blogs: Blog[]) {\n    return (\n      <Card className=\"blog-cards__card\" key={keyId}>\n        <CardContent>\n          <header className=\"blog-cards__blogs-header\">{subject.name || subject.id}</header>\n          {blogs.map(blog => {\n            return (\n              <Link to={config.routes.blog.detail(blog.id)} className=\"blog-cards__blogs-list-element\" key={blog.id}>\n                <ViewHeadlineIcon fontSize=\"inherit\" />\n                <div className=\"blog-cards__blogs-list-element-text\">{blog.title}</div>\n              </Link>\n            )\n          })}\n        </CardContent>\n        <CardActions>\n          <Button size=\"large\" onClick={() => this.handleRemoveSubjectBlogs(keyId)}>Unpin</Button>\n        </CardActions>\n      </Card>\n    )\n  }\n\n  renderMainCard() {\n    return (\n      <Card className=\"blog-cards__card--header\">\n        <CardContent>\n          {this.state.loading && <LinearProgress />}\n          <SelectWidget data={this.state.subjects} onChange={(id: number) => this.handleSubjectSelectChange(id)}/>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"blog-cards\">\n        <div className=\"blog-cards__header\">\n          {this.renderMainCard()}\n        </div>\n        <div className=\"blog-cards__list\">\n          {this.state.selectedEntity.map((entity: Entity, index: number) => this.renderBlogsCard(index, entity.subject, entity.blogs))}\n        </div>\n\n      </div>\n    );\n  }\n};\n\nexport default SelectCardList;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { config  } from '../../../config';\nimport SelectCardList from '../common/SelectCardList';\n\n\ninterface State {\n\n}\n\ninterface Props {\n  location: any;\n};\n\nclass Sites extends React.Component<Props, State> {\n  endpoint: string = config.endpoints.blog.countries;\n  filters = {country: null};\n  state = {\n    sites: []\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      sites: this.props.location.state?.countries || null,\n    }\n  }\n\n  render() {\n    return (\n      <SelectCardList endpoint={this.endpoint} filters={this.filters}  initData={this.state.sites}></SelectCardList>\n    );\n  }\n};\n\nexport default connect()(Sites);\n","import React, { useState } from 'react';\nimport { useParams } from \"react-router-dom\";\n\nimport './Entry.scss';\n\nimport { config  } from '../../../config';\nimport HttpService from '../../../shared/services/HttpService';\nimport { Blog } from '../../../shared/interfaces/blog';\n\n\ninterface Props {\n  match: any;\n};\n\ninterface State {\n  blog: Blog;\n}\n\n\nclass Entry extends React.Component<Props, State> {\n  _httpService: HttpService = new HttpService();\n  state = {\n    blog: {id: 0, content: '', user_id: 0, title: \"\", cooperators: null, photo_names: null, views: 0, country: \"Poland\"},\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params;\n    this.getBlog(id);\n  }\n\n  getBlog(id: number) {\n    const url = `${config.endpoints.blog.base}${id}/`;\n    this._httpService.get(url).then((response: Blog) => {\n      this.setState({\n        ...this.state,\n        blog: response,\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"entry\">\n        {this.state.blog.content}\n      </div>\n    );\n  }\n};\n\nexport default Entry;","import React from 'react';\n\nimport './Authors.scss';\n\nimport { config  } from '../../../config';\nimport SelectCardList from '../common/SelectCardList';\nimport { User } from '../../../shared/interfaces/user';\n\n\ninterface Props {\n  location: any;\n};\n\ninterface State {\n  authors: User[];\n}\n\n\nclass Authors extends React.Component<Props, State> {\n  endpoint: string = config.endpoints.blog.authors;\n  filters = {user_id: 'id'};\n  selector: string = 'username';\n  state = {\n    authors: []\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      authors: this.props.location.state?.authors || null,\n    }\n  }\n\n  render() {\n    return (\n      <SelectCardList endpoint={this.endpoint} selector={this.selector} filters={this.filters} initData={this.state.authors}></SelectCardList>\n    );\n  }\n};\n\nexport default Authors;","import React from 'react';\n\nimport './Dashboard.scss';\n\nimport HttpService from '../../shared/services/HttpService';\nimport { Blog } from '../../shared/interfaces/blog';\nimport { User } from '../../shared/interfaces/user';\nimport { config } from '../../config';\nimport { Link } from 'react-router-dom';\n\n\ninterface State {\n  latestBlogs: Blog[];\n  mostSeenBlogs: Blog[];\n  topSeenAuthors: User[];\n  mostSeenCountries: string[];\n}\n\ninterface Props {\n\n}\n\nclass Dashboard extends React.Component<Props, State> {\n  private _httpService: HttpService = new HttpService();\n  state = {\n    latestBlogs: [],\n    mostSeenBlogs: [],\n    topSeenAuthors: [],\n    mostSeenCountries: [],\n  };\n\n  componentDidMount() {\n    this.getMostSeenBlogs();\n    this.getLatestBlogs();\n    this.getTopSeenAuthors();\n    this.getMostSeenCountries();\n  }\n\n  getMostSeenBlogs() {\n    const url = config.endpoints.blog.base;\n    const params = {limit: 5, ordering: '-views'};\n    this._httpService.get(url, params).then((response: Blog[]) => {\n      this.setState({\n        mostSeenBlogs: response,\n      })\n    }).catch(err => {});\n  }\n\n  getLatestBlogs() {\n    const url = config.endpoints.blog.base;\n    const params = {limit: 5};\n    this._httpService.get(url, params).then((response: Blog[]) => {\n      this.setState({\n        latestBlogs: response,\n      })\n    }).catch(err => {});\n  }\n\n  getTopSeenAuthors() {\n    const url = config.endpoints.blog.authors;\n    const params = {limit: 5, ordering: '-views'};\n    this._httpService.get(url, params).then((response: User[]) => {\n      this.setState({\n        topSeenAuthors: response,\n      })\n    }).catch(err => {});\n  }\n\n  getMostSeenCountries() {\n    const url = config.endpoints.blog.countries;\n    const params = {limit: 5, ordering: '-views'};\n    this._httpService.get(url, params).then((response: string[]) => {\n      this.setState({\n        mostSeenCountries: response,\n      })\n    }).catch(err => {});\n  }\n\n  render() {\n    return (\n      <div className=\"blog-dashboard\">\n        <div className=\"blog-dashboard__table blog-dashboard__most-seen-blogs\">\n          <header>Most seen blogs</header>\n          {this.state.mostSeenBlogs.map((blog: Blog) => {\n            return (\n              <Link to={config.routes.blog.detail(blog.id)} className=\"blog-dashboard__list-elem-link\" key={blog.id}>\n                <div>{blog.title}</div>\n              </Link>\n            )\n          })}\n        </div>\n\n        <div className=\"blog-dashboard__table blog-dashboard__latest-blogs\">\n          <header>Latest blogs</header>\n          {this.state.latestBlogs.map((blog: Blog) => {\n            return (\n              <Link to={config.routes.blog.detail(blog.id)} className=\"blog-dashboard__list-elem-link\" key={blog.id}>\n                <div>{blog.title}</div>\n              </Link>\n            )\n          })}\n        </div>\n\n        <div className=\"blog-dashboard__table blog-dashboard__top-seen-authors\">\n          <header className=\"blog-dashboard__header-action\">\n            <div>Top 5 seen authors</div>\n            <div>\n              <Link to={{\n                pathname: config.routes.blog.authors,\n                state: {\n                  authors: this.state.topSeenAuthors\n                }}}\n              >\n                Go to\n              </Link>\n            </div>\n          </header>\n          {this.state.topSeenAuthors.map((user: User, index: number) => {\n            return (\n              <div key={index}>{user.username}</div>\n            )\n          })}\n        </div>\n\n        <div className=\"blog-dashboard__table blog-dashboard__most-seen-countries\">\n          <header className=\"blog-dashboard__header-action\">\n            <div>Most seen countries</div>\n            <Link to={{\n                pathname: config.routes.blog.sites,\n                state: {\n                  countries: this.state.mostSeenCountries\n                }}}\n              >\n                Go to\n              </Link>\n          </header>\n          {this.state.mostSeenCountries.map((country: string, index: number) => {\n            return (\n              <div key={index}>{country}</div>\n            )\n          })}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Dashboard;","export function setOpenLoginDialog(open: boolean) {\n  return {type: 'OPEN_LOGIN', value: open};\n}","export function setToken(value: string) {\n  return {type: 'SET_TOKEN', value};\n}\n\nexport function resetToken() {\n  return {type: 'SET_TOKEN', value: ''};\n}","import { User } from \"../shared/interfaces/user\";\n\nexport function setUserData(user: User) {\n  return {type: 'SET_USER_DATA', data: user};\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport './Sidebar.scss';\n\nimport { config } from '../../config';\nimport { setOpenLoginDialog } from '../../actions/login-dialog';\nimport { User } from '../../shared/interfaces/user';\nimport { resetToken } from '../../actions/token';\nimport { notifySuccess } from '../../actions/notify';\nimport { setUserData } from '../../actions/user';\n\n\n\ninterface Props {\n  setOpenLoginDialog: (open: boolean) => void;\n  resetToken: () => void;\n  setUserData: (data: User) => void;\n  notifySuccess: (msg: string) => void;\n  user: User;\n  token: string;\n  children: any;\n}\n\ninterface State {\n  user?: User;\n  token?: string;\n}\n\nconst BlogSidebarComponent = (props: Props) =>  {\n  const handleLogin = () => {\n    if (props.token) {\n      props.resetToken();\n      props.setUserData({});\n      props.notifySuccess('Logout confirmed');\n    } else {\n      props.setOpenLoginDialog(true);\n    }\n  };\n\n  const renderLoginButton = () => {\n    return props.token ? \"Logout\" : \"Login\";\n  };\n\n  const renderNav = () => {\n    return (\n      <div className=\"blog__sidebar\">\n        <div className=\"blog__top\">\n          <Link to=\"/\" className=\"blog__name\">Blog</Link>\n          <div className=\"blog__navs\">\n            <Link to={config.routes.blog.dashboard} className=\"\">Dashboard</Link>\n            <Link to={config.routes.blog.authors} className=\"\">Authors</Link>\n            <Link to={config.routes.blog.sites} className=\"\">Sites</Link>\n            <Link to={config.routes.blog.addNew} className=\"\">Add blog</Link>\n          </div>\n        </div>\n        <div className=\"blog__bottom\">\n          <div className=\"blog__login\" onClick={() => handleLogin()}>\n            {renderLoginButton()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"blog\">\n      {renderNav()}\n      <div className=\"blog__main\">\n        {props.children}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => {\n  return {\n    user: state.user,\n    token: state.token,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setOpenLoginDialog: (open: boolean) => dispatch(setOpenLoginDialog(open)),\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg)),\n    resetToken: () => dispatch(resetToken()),\n    setUserData: (data: User) => dispatch(setUserData(data)),\n  };\n};\n\nexport const BlogSidebar = connect(mapStateToProps, mapDispatchToProps)(BlogSidebarComponent);","export interface Profile {\n    location?: string;\n    facebook_id?: string;\n    facebook_name?: string;\n}\n\nexport interface User {\n    id? :number;\n    username?: string;\n    first_name?: string;\n    last_name?: string;\n    profile?: Profile;\n}\n\nexport enum RegisterFormType {\n    NONE,\n    FRAGMENTARY,\n    FULL,\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { notifyError } from '../../actions/notify';\nimport { User } from '../interfaces/user';\nimport { Redirect, Route } from 'react-router-dom';\n\n\ninterface State {\n  user: User;\n}\n\ninterface Props {\n  children: any;\n  user: User;\n  app: string;\n  notifyError: (msg: string) => void;\n}\n\nconst Guard = ({ component: Component, user, app, notifyError, ...rest }) => {\n  const redirectWrongLogin = () => {\n    notifyError('Please sign in to have full access!');\n    return <Redirect to={{\n      pathname: `/${app}`,\n    }} />\n  };\n\n  return <Route {...rest} render={(props) => (\n    user?.username\n    ? <Component {...props} />\n    : redirectWrongLogin()\n  )} />\n}\n\n\n\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    notifyError: (msg: string) => dispatch(notifyError(msg)),\n  };\n};\n\nconst mapStateToProps = (state: State) => {\n  return {\n    user: state.user,\n  };\n}\n\nexport const AuthGuard = connect(mapStateToProps, mapDispatchToProps)(Guard);","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport './Blog.scss';\n\nimport { config } from '../../config';\nimport AddForm  from './add/Add';\nimport Sites from './cards/Sites';\nimport Entry from './detail/Entry';\nimport Authors from './cards/Authors';\nimport Dashboard from './Dashboard';\nimport { BlogSidebar } from './Sidebar';\nimport { AuthGuard } from '../../shared/guards/AuthGuard'\n\n\ninterface Props {\n\n}\n\nconst BlogComponent = (props: Props) => {\n  const renderContent = () => {\n    return (\n      <Switch>\n          <Route path={config.routes.blog.dashboard} exact component={Dashboard} />\n          <Route path={config.routes.blog.authors} component={Authors} />\n          {/* <Route path={config.routes.blog.addNew} component={AddForm} /> */}\n          <AuthGuard path={config.routes.blog.addNew} component={AddForm} app=\"blog\" />\n          <Route path={config.routes.blog.sites} component={Sites} />\n          <Route path={config.routes.blog.detail()} component={Entry} />\n      </Switch>\n    )\n  }\n\n  return (\n    <BlogSidebar>\n      {renderContent()}\n    </BlogSidebar>\n  )\n}\n\nexport const Blog = connect(null)(BlogComponent);","import React from 'react';\nimport './Forum.scss';\n\n\nexport class Forum extends React.Component {\n    render() {\n        return (\n            <div>for</div>\n        )\n    }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Dashboard.scss';\n\n\nexport class Dashboard extends React.Component {\n\n  render() {\n    return (\n      <div className=\"dashboard\">\n          <div className=\"part part--1\">\n            <Link to=\"/blog\" className=\"part__link link\">\n              <div className=\"part__quarter part__quarter--1\">\n                <div className=\"part__name part__name--1\">\n                  blog\n                </div>\n              </div>\n            </Link>\n          </div>\n          <div className=\"part part--2\">\n            <Link to=\"/photos\" className=\"part__link link\">\n              <div className=\"part__quarter part__quarter--2\">\n                <div className=\"part__name part__name--2\">\n                  photos\n                </div>\n              </div>\n            </Link>\n          </div>\n          <div className=\"part part--3\">\n            <Link to=\"/forum\" className=\"part__link link\">\n              <div className=\"part__quarter part__quarter--3\">\n                <div className=\"part__name part__name--3\">\n                  forum\n                </div>\n              </div>\n            </Link>\n          </div>\n          <div className=\"part part--4\">\n            <div className=\"part__bg-video\">\n              {/* <ReactPlayer url='containers/movies.mp4' className=\"part__bg-video--content\" lopp playing muted controls/> */}\n              <video className=\"part__bg-video--content\" autoPlay muted loop>\n                <source src=\"movie-dashboard.mp4\" type=\"video/mp4\"></source>\n                <source src=\"movie-dashboard-2.webm\" type=\"video/webm\"></source>\n                Sorry, your browser doesn't support embedded videos.\n              </video>\n              <div className=\"part__bg-video--gradient\"></div>\n            </div>\n            <Link to=\"/movies\" className=\"part__link link\">\n              <div className=\"part__quarter part__quarter--4\">\n                <div className=\"part__name part__name--4\">\n                  movies\n                </div>\n              </div>\n            </Link>\n          </div>\n      </div>\n    );\n  }\n};","import React from 'react';\n\n\nexport const Photos = (props: any) => {\n  return (\n    <div>\n      heh\n    </div>\n  );\n};","import React from 'react';\n\n\nexport const Movies = (props: any) => {\n  return (\n    <div></div>\n  );\n};","import React from 'react';\n\n\nexport const NotFound = (props: any) => {\n  return (\n    <div>\n      404\n    </div>\n  );\n};","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport FacebookLogin from 'react-facebook-login';\nimport { config } from '../../config';\nimport { setToken } from '../../actions/token';\nimport { RegisterFormType } from '../../shared/interfaces/user';\nimport HttpService from '../../shared/services/HttpService';\nimport { notifySuccess } from '../../actions/notify';\n\n\ninterface FacebookDataPicture {\n  height: number;\n  is_silhouette: boolean;\n  url: string;\n  width: number;\n}\n\ninterface FacebookPicture {\n  data: FacebookDataPicture;\n}\n\ninterface FacebookResponse {\n  status: string;\n  name: string;\n  picture: FacebookPicture;\n  id: string;\n  accessToken: string;\n  userID: string;\n  expiresIn: 3945;\n  signedRequest: string;\n  graphDomain: 'facebook';\n  data_access_expiration_time: number;\n}\n\ninterface Props {\n  setToken: (token: string) => void;\n  handleClose: (logged: boolean) => void;\n  notifySuccess: (msg: string) => void;\n  setRegistration: (type: number) => void;\n  fbCssClass: string;\n}\n\nexport const FacebookComponent = (props: Props) => {\n  const _httpService: HttpService = new HttpService();\n\n  const responseFacebook = (responseFb: FacebookResponse) => {\n    const url = config.endpoints.auth.exists_fb;\n    _httpService.get(`${url}?fb_id=${responseFb.userID}`).then(response => {\n      const exists = response.exists;\n      if (exists) {\n        props.setToken(responseFb.accessToken);\n        props.notifySuccess('Now you are logged in!');\n        props.handleClose(true);\n      } else {\n        props.setRegistration(RegisterFormType.FRAGMENTARY);\n      }\n    }).catch(err => {});\n  }\n\n  const componentClicked = () => {\n  }\n\n  const facebookData = (<FacebookLogin\n    cssClass={props.fbCssClass}\n    appId=\"3136029376407498\"\n    autoLoad={false}\n    fields=\"name,picture,email\"\n    onClick={componentClicked}\n    callback={responseFacebook} />\n  );\n\n  return (\n      <div>{facebookData}</ div>\n  )\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setToken: (token: string) => dispatch(setToken(token)),\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg)),\n  };\n};\n\nexport const Facebook = connect(null, mapDispatchToProps)(FacebookComponent);\n","import React, {useState} from 'react';\nimport { connect } from 'react-redux';\nimport { Facebook } from './Facebook';\n\nimport './LoginForm.scss';\n\nimport { notifySuccess, notifyError } from '../../actions/notify';\nimport { setToken } from '../../actions/token';\nimport { RegisterFormType } from '../../shared/interfaces/user';\nimport { config  } from \"../../config\";\nimport HttpService from '../../shared/services/HttpService'\nimport { InputWidget, ErrorWidget } from 'widgets';\n\n\ninterface Props {\n  setToken: (token: string) => void;\n  handleClose: (logged: boolean) => void;\n  notifySuccess: (msg: string) => void;\n  setRegistration: (type: number) => void;\n}\n\ninterface State {\n}\n\ninterface Credentials {\n  username: string;\n  password: string;\n}\n\nexport const LoginFormComponent = (props: Props) => {\n  const _httpService: HttpService = new HttpService();\n  const [credentials, setCredentials] = useState<Credentials>({username: '', password: ''});\n  const [validationError, setValidationError] = useState<{valid: boolean, msg: string}>({valid: true, msg: \"Username and password must be filled\"});\n\n  const handleSubmit = (event: any) => {\n    event.preventDefault();\n    if (credentials.username && credentials.password) {\n      const url = config.endpoints.auth.login;\n      _httpService.post(url, credentials).then(response => {\n        props.setToken(response.token);\n        props.handleClose(true);\n        props.notifySuccess('Now you are logged in!');\n      }).catch(err => {});\n    } else {\n      setNonValid();\n    }\n  }\n\n  const setNonValid = () => {\n    setValidationError({\n      ...validationError,\n      valid: false,\n    });\n    setTimeout(() => setValidationError({\n      ...validationError,\n      valid: true,\n    }), 4000)\n  }\n\n  const onUsernameChange = (value: string) => {\n    setCredentials({\n      ...credentials,\n      username: value\n    });\n  }\n\n  const onPasswordChange = (value: string) => {\n    setCredentials({\n      ...credentials,\n      password: value\n    });\n  }\n\n  return (\n    <div className=\"login\">\n      <Facebook fbCssClass=\"login__fb-btn\" handleClose={props.handleClose} setRegistration={props.setRegistration}/>\n      <form className=\"login__form\" onSubmit={(e) => handleSubmit(e)}>\n        <div className=\"form-field\">\n          <InputWidget placeholder=\"Username\" onChange={(value: string) => onUsernameChange(value)}/>\n        </div>\n        <div className=\"form-field\">\n          <InputWidget type=\"password\" placeholder=\"Password\" onChange={(value: string) => onPasswordChange(value)}/>\n        </div>\n        <ErrorWidget text={validationError.valid ? \"\" : validationError.msg}/>\n        <div className=\"login__actions\">\n          {/* <ButtonWidget type={\"button\"} onClick={(e) => props.setRegistration(RegisterFormType.FULL)} text={\"Sign up\"}/>\n          <ButtonWidget type={\"submit\"} text={\"Login\"}/> */}\n          <button className=\"login__signup-btn\" type=\"button\" onClick={(e) => props.setRegistration(RegisterFormType.FULL)}>Sign up</button>\n          <button className=\"login__signin-btn\" type=\"submit\">Login</button>\n        </div>\n      </form>\n    </div>\n    )\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setToken: (token: string) => dispatch(setToken(token)),\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg)),\n  };\n};\n\nexport const LoginForm = connect(null, mapDispatchToProps)(LoginFormComponent);","import React, { useState } from 'react';\nimport { useForm, ErrorMessage } from \"react-hook-form\";\nimport { connect } from 'react-redux';\n\nimport './RegisterForm.scss';\n\nimport { notifySuccess } from '../../actions/notify';\nimport { User, Profile, RegisterFormType } from '../../shared/interfaces/user';\nimport { config  } from \"../../config\";\nimport HttpService from '../../shared/services/HttpService'\nimport { InputWidget, ErrorWidget } from 'widgets';\n\ninterface Props {\n  user: User;\n  registerType: number;\n  notifySuccess: (msg: string) => void;\n  setRegistration: (register: number) => void;\n}\n\ninterface State {\n  user: User;\n}\n\ninterface Account {\n  username?: string;\n  password?: string;\n  passwordConfirmation?: string;\n  email?: string;\n  profile?: Profile;\n}\n\nexport const RegisterFormComponent = (props: Props) => {\n  const _httpService: HttpService = new HttpService();\n  const [validationError, setValidationError] = useState<{valid: boolean, msg: string}>({valid: true, msg: \"Passwords must be the same\"});\n  const {register, setValue, handleSubmit, errors} = useForm<Account>();\n\n  const onSubmit = handleSubmit((data: Account) => {\n    if (data.password !== data.passwordConfirmation) {\n      setValidationError({\n        ...validationError,\n        valid: false\n      });\n      setTimeout(() => setValidationError({\n        ...validationError,\n        valid: true,\n      }), 4000)\n    } else {\n      delete data.passwordConfirmation;\n      data = {...data, profile: {facebook_id: props.user.profile?.facebook_id}};\n      const url = config.endpoints.auth.register\n      _httpService.post(url, data).then(reponse => {\n        props.setRegistration(RegisterFormType.NONE);\n        props.notifySuccess('Register successfully! Login again to authenticate yourself')\n      }).catch(err => {\n\n      })\n    }\n  });\n\n  const renderAdditionalFields = () => {\n    return (\n      <div className=\"register-form__additional-fields\">\n        <div className=\"form-field\">\n          <InputWidget type=\"password\" placeholder=\"Password\" name=\"password\" refe={register({required: true})}/>\n        </div>\n        <ErrorWidget text={errors.password ? \"Password is required!\" : \"\"}/>\n        <div className=\"form-field\">\n          <InputWidget type=\"password\" placeholder=\"Password Confirmation\" name=\"passwordConfirmation\" refe={register({required: true})}/>\n        </div>\n        <ErrorWidget text={errors.passwordConfirmation ? \"Password confirmation is required!\" : \"\"}/>\n        <ErrorWidget text={validationError.valid ? \"\" : validationError.msg}/>\n        <div className=\"form-field\">\n          <InputWidget type=\"email\" placeholder=\"Email\" name=\"email\" refe={register({required: true})}/>\n        </div>\n        <ErrorWidget text={errors.email ? \"Email is required!\" : \"\"}/>\n      </div>\n    )\n  }\n\n  const renderBasicFields = () => {\n    return (\n      <div className=\"register-form__basic-fields\">\n        <div className=\"form-field\">\n          <InputWidget placeholder=\"Username\" name=\"username\" refe={register({required: true})}/>\n        </div>\n        <ErrorWidget text={errors.username ? \"Username is required!\" : \"\"}/>\n      </div>\n    )\n  }\n\n  const renderActions = () => {\n    return (\n      <div className=\"register-form__actions\">\n        <button type=\"button\" onClick={(e) => props.setRegistration(RegisterFormType.NONE)}>Back</button>\n        <button type=\"submit\">Register</button>\n      </div>\n    )\n  }\n\n  return (\n    <form className=\"register-form\" onSubmit={onSubmit}>\n      {renderBasicFields()}\n      {props.registerType === RegisterFormType.FULL ? renderAdditionalFields() : <></>}\n      {renderActions()}\n    </form>\n  );\n};\n\nconst mapStateToProps = (state: State) => {\n  return {\n    user: state.user,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    notifySuccess: (msg: string) => dispatch(notifySuccess(msg)),\n  };\n};\n\nexport const RegisterForm = connect(mapStateToProps, mapDispatchToProps)(RegisterFormComponent);","import React from 'react';\nimport { CloseOutlined } from '@material-ui/icons';\n\nimport './Dialog.scss';\n\n\ninterface Props {\n    onClose: () => void;\n    open: boolean;\n    children?: any;\n    title?: string;\n}\n\nexport const Dialog = (props: Props) => {\n\n  const onBackgroundClick = (event) => {\n    if(event.target === event.currentTarget) {\n        props.onClose();\n    }\n  }\n\n  return (\n    <div className={`dialog ${props.open ? 'dialog--show' : ''}`} onClick={(e) => onBackgroundClick(e)}>\n      <div className=\"dialog__box\">\n        <CloseOutlined className=\"dialog__exit-icon\" fontSize=\"large\" onClick={props.onClose} />\n        <h3 className=\"dialog__title\">{props.title}</h3>\n        {props.children}\n      </div>\n    </div>\n  );\n};","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport './LoginDialog.scss';\n\nimport { setOpenLoginDialog } from '../../actions/login-dialog';\nimport { LoginForm } from './LoginForm';\nimport { RegisterForm } from './RegisterForm';\nimport { User, RegisterFormType } from '../../shared/interfaces/user';\nimport { Dialog } from '../../shared/components/Dialog';\nimport { config  } from \"../../config\";\nimport HttpService from '../../shared/services/HttpService';\nimport { setUserData } from '../../actions/user';\n\n\ninterface Props {\n  setOpenLoginDialog: (open: boolean) => void;\n  setUserData: (data: User) => void;\n  isOpenLoginDialog: boolean;\n  user: User;\n  token: string;\n}\n\ninterface State {\n  isOpenLoginDialog: boolean;\n  user: User;\n  token: string;\n}\n\nconst LoginComponent = (props: Props) => {\n  const _httpService: HttpService = new HttpService();\n  const [isRegistration, setRegistration] = useState<number>(RegisterFormType.NONE);\n\n  const getUserData = () => {\n    _httpService.get(config.endpoints.auth.me).then((response: User) => {\n      props.setUserData(response);\n    })\n  }\n\n  const handleClose = (logged: boolean = false) => {\n    setRegistration(RegisterFormType.NONE);\n    props.setOpenLoginDialog(false);\n    if (logged) getUserData();\n  };\n\n  const renderRegisterForm = () => {\n    return (\n      <RegisterForm setRegistration={setRegistration} registerType={isRegistration}></RegisterForm>\n    )\n  }\n\n  const renderLoginForm = () => {\n    return (\n      <LoginForm handleClose={handleClose} setRegistration={setRegistration}></LoginForm>\n    )\n  }\n\n  return (\n    <Dialog onClose={() => handleClose()} open={props.isOpenLoginDialog} title={isRegistration ? 'Sign up' : 'Login'}>\n      {isRegistration ? renderRegisterForm() : renderLoginForm()}\n    </Dialog>\n  );\n};\n\nconst mapStateToProps = (state: State) => {\n  return {\n    isOpenLoginDialog: state.isOpenLoginDialog,\n    user: state.user,\n    token: state.token,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    setOpenLoginDialog: (open: boolean) => dispatch(setOpenLoginDialog(open)),\n    setUserData: (data: User) => dispatch(setUserData(data)),\n  };\n};\n\nexport const LoginDialog = connect(mapStateToProps, mapDispatchToProps)(LoginComponent);\n","import { AxiosResponse, AxiosError } from 'axios';\nimport axios from '../../configAxios';\n\n\nclass ErrorResponseInterceptor {\n  staticMessages = {\n    504: 'Problem with server connection',\n    0: 'Unrecognized error',\n  }\n\n  initInterceptor(notifyError: (msg: string) => void) {\n    axios.interceptors.response.use((config: AxiosResponse) => {\n      return config;\n    }, (error: AxiosError) => {\n      const status = error.response?.status || 0;\n      let msg = this.staticMessages[status];\n      const data = error.response?.data;\n      msg = msg || data.message || (data.non_field_errors && data.non_field_errors[0]) || this.staticMessages['0'];\n      console.log(msg)\n      if (msg.length) {\n        notifyError(msg);\n        throw new Error(msg);\n      }\n    })\n  }\n}\n\nexport default ErrorResponseInterceptor;","import { AxiosRequestConfig } from 'axios';\nimport axios from '../../configAxios';\n\n\nclass TokenInterceptor {\n  initInterceptor() {\n    axios.interceptors.request.use((config: AxiosRequestConfig) => {\n      const token = localStorage.getItem('token');\n      let headers = {...config.headers};\n      if (token) {\n        headers = {\n          ...headers,\n          'Authorization': `Token ${token}`,\n        }\n        config = {\n          ...config,\n          headers\n        }\n      }\n      return config;\n    });\n  }\n}\n\nexport default TokenInterceptor;","import ErrorResponseInterceptor from \"./response_error.interceptor\";\nimport TokenInterceptor from \"./token.interceptor\";\n\nclass Interceptor {\n  private _errInterceptor: ErrorResponseInterceptor = new ErrorResponseInterceptor();\n  private _tokenInterceptor: TokenInterceptor = new TokenInterceptor();\n\n  initInterceptors(notifyError: (msg: string) => void) {\n    this._errInterceptor.initInterceptor(notifyError);\n    this._tokenInterceptor.initInterceptor();\n  }\n}\n\nexport default Interceptor;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport NotificationSystem from 'react-notification-system';\n\nimport './App.scss';\nimport { Notification } from '../shared/interfaces/notification.interface';\n\nimport { Blog } from './Blog/Blog';\nimport { Forum } from './Forum/Forum';\nimport { Dashboard } from './Dashboard/Dashboard';\nimport { Photos } from './Photos/Photos';\nimport { Movies } from './Movies/Movies';\nimport { NotFound } from '../shared/components/NotFound';\nimport { LoginDialog } from './Login/LoginDialog';\nimport { notifyError } from '../actions/notify';\nimport Interceptor from '../shared/interceptors/interceptor';\nimport { setToken } from '../actions/token';\nimport { setUserData } from '../actions/user';\nimport { User } from '../shared/interfaces/user';\nimport HttpService from '../shared/services/HttpService';\nimport { config } from '../config';\n\n\ninterface State {\n  notify: Notification;\n}\n\ninterface Props {\n  notify: Notification;\n  notifyError: (msg: string) => void;\n  setToken: (token: string) => void;\n  setUserData: (data: User) => void;\n}\n\nclass App extends React.Component <Props, State> {\n  private _httpService: HttpService = new HttpService();\n  private _interceptor: Interceptor = new Interceptor();\n  private _notificationSystem = React.createRef();\n  private _notificationStyle = {\n    NotificationItem: {\n      DefaultStyle: {\n        fontSize: '2rem',\n      },\n    }\n  }\n\n  constructor(props: Props) {\n    super(props);\n    this._interceptor.initInterceptors(props.notifyError);\n    const token = localStorage.getItem('token');\n    props.setToken(token || '');\n    if (token) this.getUserData();\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State, snapshot: any) {\n    const notification = this.props.notify;\n    if (prevProps.notify !== notification) {\n      this.addNotification(notification.msg, notification.type);\n    }\n  }\n\n  getUserData() {\n    this._httpService.get(config.endpoints.auth.me).then((response: User) => {\n      this.props.setUserData(response);\n    }).catch(err => {});\n  }\n\n  addNotification = (msg: string, level: string) => {\n    const notification: any = this._notificationSystem.current;\n    notification.addNotification({\n      message: msg,\n      level: level\n    });\n  };\n\n  renderRouter() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path=\"/\" exact component={Dashboard} />\n          <Route path=\"/blog\" component={Blog} />\n          <Route path=\"/photos\" component={Photos} />\n          <Route path=\"/forum\" component={Forum} />\n          <Route path=\"/movies\" component={Movies} />\n          <Route path=\"*\" component={NotFound} />\n        </Switch>\n      </Router>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        {this.renderRouter()}\n        <NotificationSystem ref={this._notificationSystem} style={this._notificationStyle}/>\n        <LoginDialog />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: State) => {\n  return {\n      notify: state.notify,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    notifyError: (msg: string) => dispatch(notifyError(msg)),\n    setToken: (token: string) => dispatch(setToken(token)),\n    setUserData: (data: User) => dispatch(setUserData(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Notification } from '../shared/interfaces/notification.interface';\n\n\nconst initialState = {\n  type: 'INFO',\n  msg: 'INFO'\n}\n\nconst notify = (state: Notification = initialState, action: Notification) => {\n  if (['info', 'success', 'warning', 'error'].includes(action.type)) {\n    state = {\n      ...state,\n      type: action.type,\n      msg: action.msg\n    }\n  }\n  return state;\n};\n\nexport default notify;\n","const initialState: string = '';\n\ninterface Action {\n  type: string;\n  value: string;\n};\n\nconst token = (state: string = initialState, action: Action) => {\n  switch (action.type) {\n    case 'SET_TOKEN' :\n      localStorage.setItem('token', action.value ? action.value : '');\n      state = action.value;\n    break;\n  }\n  return state;\n};\n\nexport default token;","import { User, Profile } from \"../shared/interfaces/user\";\n\n\nconst profile: Profile = {\n  location: '',\n  facebook_id: '',\n  facebook_name: '',\n}\n\nconst initialState: User = {\n    username: '',\n    profile: profile,\n};\n\ninterface Action {\n  type: string;\n  data: User;\n};\n\n\nconst user = (state: User = initialState, action: Action) => {\n  switch (action.type) {\n    case 'SET_USER_DATA' :\n      state = {...action.data};\n    break;\n  }\n  return state;\n};\n\nexport default user;","\nconst initialState = false;\n\ninterface Action {\n  type: string,\n  value: boolean\n};\n\nconst isOpenLoginDialog = (state: boolean = initialState, action: Action) => {\n  switch (action.type) {\n    case 'OPEN_LOGIN' :\n      state = action.value;\n    break;\n  }\n  return state;\n};\n\nexport default isOpenLoginDialog;","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\n\nimport notify from './reducers/notify';\nimport token from './reducers/token';\nimport user from './reducers/user';\nimport isOpenLoginDialog from './reducers/login-dialog';\n\nexport default createStore(\n  combineReducers({\n      notify,\n      isOpenLoginDialog,\n      user,\n      token,\n  }), {}, applyMiddleware(createLogger())\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\nimport store from './store';\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}